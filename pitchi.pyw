from io import BytesIO
import tkinter as tk
from tkinter import ttk
import tkinter.messagebox as tkMessageBox
import tkinter.scrolledtext as sk
from tkinter import Menu, filedialog
from tkinter.filedialog import asksaveasfile, askopenfilename
from PIL import Image, ImageDraw, ImageFont, ImageTk
import os
import random
from os import close, path
import configparser
import base64
import math
from pathlib import Path as unipath
import screeninfo
import threading
import keyboard
import wget
import time
import h5py as h5
import numpy as np

local_dir = os.path.dirname(os.path.realpath(__file__))

# Establish local directories and files
data_dir = unipath(local_dir + '/data/')
icon_path = unipath.joinpath(data_dir,'icon.ico')
logo_path = unipath.joinpath(data_dir,'logo.png')
study_logo_path = unipath.joinpath(data_dir,'study_logo.png')
words_l_dir = unipath(local_dir + '/data/word-lists/')
themes_dir = unipath(local_dir + '/data/themes/')
settings_dir = unipath(local_dir + '/data/settings.ini')

####################################################################################################
icon = '''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
GAAH/44AB////B8='''

logo = '''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
SUVORK5CYII='''

study_logo = '''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'''

exit_button_data = '''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'''

max_button_data = '''iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAABhWlDQ1BJQ0MgcHJvZmlsZQAAKJF9
kT1Iw0AcxV9TpSIVhZYi4pChOlkQFXGUKhbBQmkrtOpgcumH0KQhSXFxFFwLDn4sVh1cnHV1cBUE
wQ8QJ0cnRRcp8X9JoUWMB8f9eHfvcfcOEBoVpppd44CqWUY6ERdz+RUx8IoABhBBCBGJmXoys5CF
5/i6h4+vdzGe5X3uz9GnFEwG+ETiWaYbFvE68fSmpXPeJw6zsqQQnxOPGXRB4keuyy6/cS45LPDM
sJFNzxGHicVSB8sdzMqGSjxFHFVUjfKFnMsK5y3OaqXGWvfkLwwWtOUM12kOI4FFJJGCCBk1bKAC
CzFaNVJMpGk/7uEfcvwpcsnk2gAjxzyqUCE5fvA/+N2tWZyccJOCcaD7xbY/RoDALtCs2/b3sW03
TwD/M3Cltf3VBjDzSXq9rUWPgP5t4OK6rcl7wOUOMPikS4bkSH6aQrEIvJ/RN+WB0C3Qu+r21trH
6QOQpa6WboCDQ2C0RNlrHu/u6ezt3zOt/n4AYURyoPOpy9cAAAAGYktHRAC6AAAAXbbuhoMAAAAJ
cEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQfkBxECCwtsJsvzAAAAbUlEQVQ4y+2TsQ2AMAwELyh7
wCZkFORFyCQvRkk2YRQag1Im0PKdLf25OQcAMzuBg7EkSSl4eeZdavTLO1CB0nsdWIESm2WRlHva
ZpYdwMTH/IAfANCamNywXpUfwD2st54D2YK7XQYe6SlLWi6eFxkua1i+cwAAAABJRU5ErkJggg=='''

mini_button_data = '''iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAABhWlDQ1BJQ0MgcHJvZmlsZQAAKJF9
kT1Iw0AcxV9TpSIVhZYi4pChOlkQFXGUKhbBQmkrtOpgcumH0KQhSXFxFFwLDn4sVh1cnHV1cBUE
wQ8QJ0cnRRcp8X9JoUWMB8f9eHfvcfcOEBoVpppd44CqWUY6ERdz+RUx8IoABhBBCBGJmXoys5CF
5/i6h4+vdzGe5X3uz9GnFEwG+ETiWaYbFvE68fSmpXPeJw6zsqQQnxOPGXRB4keuyy6/cS45LPDM
sJFNzxGHicVSB8sdzMqGSjxFHFVUjfKFnMsK5y3OaqXGWvfkLwwWtOUM12kOI4FFJJGCCBk1bKAC
CzFaNVJMpGk/7uEfcvwpcsnk2gAjxzyqUCE5fvA/+N2tWZyccJOCcaD7xbY/RoDALtCs2/b3sW03
TwD/M3Cltf3VBjDzSXq9rUWPgP5t4OK6rcl7wOUOMPikS4bkSH6aQrEIvJ/RN+WB0C3Qu+r21trH
6QOQpa6WboCDQ2C0RNlrHu/u6ezt3zOt/n4AYURyoPOpy9cAAAAGYktHRAC6AAAAXbbuhoMAAAAJ
cEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQfkBxECITXCLBpwAAAAW0lEQVQ4y2NgGAUDDxgZGBgY
kpKSljAwMBwmVfO8efNmMkI1RzEwMPyBYmLBLwYGhnIWBgaGbgYGBjMGBoZbDAwM30kw4DsDA8Mm
mBf0GRgYXpHhheejqWAwAACDnxPQjiHPwgAAAABJRU5ErkJggg=='''

search_bar_data = '''iVBORw0KGgoAAAANSUhEUgAAARgAAAAaCAYAAABsMUMzAAABhWlDQ1BJQ0MgcHJvZmlsZQAAKJF9
kT1Iw0AcxV9TtSIVBTuIOGRonSxIFXGUKhbBQmkrtOpgcumH0KQhSXFxFFwLDn4sVh1cnHV1cBUE
wQ8QJ0cnRRcp8X9JoUWMB8f9eHfvcfcOEBoVpppdE4CqWUY6ERdz+RUx8IoABtGDGCISM/VkZiEL
z/F1Dx9f76I8y/vcn6NfKZgM8InEs0w3LOJ14ulNS+e8TxxiZUkhPiceN+iCxI9cl11+41xyWOCZ
ISObniMOEYulDpY7mJUNlXiKOKyoGuULOZcVzluc1UqNte7JXxgsaMsZrtMcRQKLSCIFETJq2EAF
FqK0aqSYSNN+3MM/4vhT5JLJtQFGjnlUoUJy/OB/8LtbszgZc5OCcaD7xbY/IkBgF2jWbfv72Lab
J4D/GbjS2v5qA5j5JL3e1sJHwMA2cHHd1uQ94HIHGH7SJUNyJD9NoVgE3s/om/LA0C3Qt+r21trH
6QOQpa6WboCDQ2CsRNlrHu/u7ezt3zOt/n4Aq+hyvrisDHAAAAAGYktHRAD/AAAAADMnfPMAAAAJ
cEhZcwAALiMAAC4jAXilP3YAAAAHdElNRQfkBxAHDQL913FfAAAAGXRFWHRDb21tZW50AENyZWF0
ZWQgd2l0aCBHSU1QV4EOFwAAAi9JREFUeNrt3StuG1EUh/Evt7isitSsILBDAryAgKB4CxdFijeQ
goISoxYlktEF3YCLDLwA05GKjApTKUuoVKlgzk2maR6OJ0H5fmSk8QMc8Ne5cx+zwyNyziPgCBgB
+8Au8AZJr80f4ApYAytgUUpZPfSDnQeCZQycAIfWVdI9lsCslDLfKGByznvAGTDp3V4Bi7iuSym/
rKv0uuSc38copj+qqc6BaSnl8t6AyTk3wCfgOG7NI52WllfSrbw4jFHOOG59Bz6XUtr/AiY6l4sI
l8tIo3PLKOmRoJnEqGcvQua0djKp972zXricGi6SNhFZcRrZcRxZAsRsUDzQ/RL3PpZSvlk2SZtq
23bdNM1vumczB03T/Gjbdl07mJO4zu1cJA3oZOb9TEmxzqVORc8sk6QBaoYc5pxHKVoagJWzRZIG
djFLuuUsAEeJm7nsheWR9AxqlowS3cIZeqkjSUPULNlPdHuLoNtfIElD1SzZTdZC0ktJdLsj6Q2V
JGmImiVXqdfOjKyLpGdQs2Sd6E0pWRdJz+B66UuiN6UUuyMlaSuRIddLX1KcSFUX2J1YIkkD1AxZ
llJWdRapLu8dx9ZrSXpq9zLh5myYGcRu6tgJ+Q44AD40TfOzbVvXxUjaNFyOgSnwFjgvpXyFf8+D
mdIdFrMHXNjJSHpC53LBzYFT0/qZR2ZK2jZYNj8ys/cjD/2WdFegDDv0+9af+doSSY952mtL7gga
X7wmCbZ48dpfGDS7Mv9hUyAAAAAASUVORK5CYII='''

search_button_data = '''iVBORw0KGgoAAAANSUhEUgAAABYAAAAWCAYAAADEtGw7AAABhWlDQ1BJQ0MgcHJvZmlsZQAAKJF9
kT1Iw0AcxV9TtSIVBTuIOGRonSxIFXGUKhbBQmkrtOpgcumH0KQhSXFxFFwLDn4sVh1cnHV1cBUE
wQ8QJ0cnRRcp8X9JoUWMB8f9eHfvcfcOEBoVpppdE4CqWUY6ERdz+RUx8IoABtGDGCISM/VkZiEL
z/F1Dx9f76I8y/vcn6NfKZgM8InEs0w3LOJ14ulNS+e8TxxiZUkhPiceN+iCxI9cl11+41xyWOCZ
ISObniMOEYulDpY7mJUNlXiKOKyoGuULOZcVzluc1UqNte7JXxgsaMsZrtMcRQKLSCIFETJq2EAF
FqK0aqSYSNN+3MM/4vhT5JLJtQFGjnlUoUJy/OB/8LtbszgZc5OCcaD7xbY/IkBgF2jWbfv72Lab
J4D/GbjS2v5qA5j5JL3e1sJHwMA2cHHd1uQ94HIHGH7SJUNyJD9NoVgE3s/om/LA0C3Qt+r21trH
6QOQpa6WboCDQ2CsRNlrHu/u7ezt3zOt/n4Aq+hyvrisDHAAAAAGYktHRAD/AAAAADMnfPMAAAAJ
cEhZcwAALiMAAC4jAXilP3YAAAAHdElNRQfkBxAHCjUKK0KXAAAAGXRFWHRDb21tZW50AENyZWF0
ZWQgd2l0aCBHSU1QV4EOFwAAAehJREFUOMut079LVXEcxvHXTQul1UjKoT0avtqdsvAPiIh0sR9E
3y0IXAqaCgpaqq3Wb2EFNbYEpaSSaxxchCCxyclEEAuEqOVDXC5xj6kPHDhwvud9nvN8nk9DKOfc
wFGM4QIG0YtlTGESC6WUH7ahfS33o3iHx9jCA1zHDM7Hs0c5577tgBvhdBRPsYR74fB3XPtwGLdx
GW9xo5Sy2QncHb9/J6CXSinLbWd+YSXnfDPO3MdnPKmLYgzHce8f0L8qpWzhJRYwkXPurwNfiByn
6nIrpXzHC/ThRB14EB8jz+1oBj0YqAP3YvU/wKvx3v468DKabdXrpGbUca0OPIWzUamOyjl3x0w2
8aUOPBmZ3c45H6hhD+EcprHY6WBXSmkNR3ARmymlr1VV/Wx3mlJq4g36cauUstRx8+LFPjyMDVyI
Ss3EoJrx++dwKJZqHldKKd86ggN+ENcwET3tiai2ItNpPMddDGM2NnWlI7jlA/1R/oGo1FoMarGU
8ivnfAzPMIJPuPqvjW3YgXLOR/AapyKW8XbnXTsBV1W1kVKaja09g2ZKaa6qqvVdgQO+nlL6EMMd
xlBK6X1VVRu7Arc4n4t+nw74XFVV6w17oMj8VQx0HuNdewFucX4yYhncE8ctzgdiuUb+AK4Yoz4z
lA/lAAAAAElFTkSuQmCC'''

settings_button_data = '''iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAD4XpUWHRSYXcgcHJvZmlsZSB0eXBl
IGV4aWYAAHjarVdZsqM6DP3XKnoJtjzIXo4HXPV28Jbfx8YQkksIqdtxgUCWNR1JVGj5/79Gf/Bj
rS1ZJ8FH7xV+NtrICQ9Brb847lrZcR8/nlt4f+LTvsFgGVCzvkqa8gl89ziw2dD5mU9h7nCYiubG
ptB0y91aPToJPq98baeiuKwPPgY5upqnq2UKDlfmZWSNcFPS3+nIsIIsVQcpw7wYbRTubKYHZr0S
LsGdTehykBocArFmCwkJeQpvo0odE/SU5O2JXrO/P70kn9Pkm5dc+pkjPJxuaHee/JHig2Gze8TP
Gyor+RHOvFqrobVljS5Zj4z6WVGKtuz0MxDMSLkZxzyW4HJ4lrEiVlBJFYBTVYHJjOeoGag00lZX
nXTTy6BFF7hoeWEBZS6ApfOCEY5cgI8GOFi6sZhoqglArvBCxoDNuy962I3DXtEBlquGKLqpwDC/
X3S1+c2i1kpPkVZhzxX84l65cKMj1++QAiC6TdzcSPC2JvzqUD8oVSDoRpoDAkwqryqy04/aMgNn
AzkHunaFJqlTAVIE2w7OaAMElNfGaa+VMAvmjeEAgBI8Z2M5AwHtHFc4yegMzySMloFtnBE9ZNmx
587GbAIQznj0VgBCCWBZ61A/YgNqKDnjrHPOO3GBXHTJG2+9896L70MuiRErTryIBImSggk2uOCD
hBBiSJGjwQx00UeJIcaYElOCoQRdCfIJnMzZZJtd9llyyDGngvIptrjii5RQYkmVq6kYE9VXqaHG
mhZNCybFYhe3+EWWsMQlNdRaM80213yTFlpsaUdtovpjfYGanqjxQKrLyY4auCSyqdB9nLiOGRBj
q4G4dARQ0NwxU0Fbyx25jpmKjKZwDCddx4aq7ogBQrtodk3v2D2Qu4UbuXALN/6EHHXo/gVyBOh+
4naCWu3fuTIQW7uw51QZdB/2l5CIQ+oftXSb5hoSpmUavJ0aKshKap5RPvVLlU+UHoyureveVe8v
T0fWnaM3g9LRvZ+n7uun/UiPPUPgPAdqhH6mdErQyZGjf4ejw8KZ5DBCV4n+5OSR0ieBO7T7QZ+R
H9F9dIx+59DDBbqssttJyoU6NBfhXJTgU1Hg21+/6qm3quhuj32Kkh7VtxeceWnkq9B2Shdddklf
tf+Dgly9oF+5caB0on7La7iZn4Eb3Z+N17jRuYHvVdHFAHo7Lc+ipJdKvx/leUH+fiYRf6zIeyOA
fu/LruhDfm44NEbtF7PnMMYOwtMIXX7Dbg7z8YF8evuit16/znQ1Xt/pP6P3hv877w7dRF+Os1bx
x5/+ArJXA+B3v1IsAAABhGlDQ1BJQ0MgcHJvZmlsZQAAeJx9kT1Iw0AcxV9TpSIVBwuKdMhQBcGC
qIijVLEIFkpboVUHk0u/oElDkuLiKLgWHPxYrDq4OOvq4CoIgh8gTo5Oii5S4v+SQosYD4778e7e
4+4dIDQqTDW7JgBVs4xUPCZmc6ti4BUBhDGIMQgSM/VEejEDz/F1Dx9f76I8y/vcn6NPyZsM8InE
c0w3LOIN4plNS+e8TxxiJUkhPiceN+iCxI9cl11+41x0WOCZISOTmicOEYvFDpY7mJUMlXiaOKKo
GuULWZcVzluc1UqNte7JXxjMaytprtMMI44lJJCECBk1lFGBhSitGikmUrQf8/APO/4kuWRylcHI
sYAqVEiOH/wPfndrFqYm3aRgDOh+se2PESCwCzTrtv19bNvNE8D/DFxpbX+1Acx+kl5va5EjoH8b
uLhua/IecLkDDD3pkiE5kp+mUCgA72f0TTlg4BboXXN7a+3j9AHIUFfLN8DBITBapOx1j3f3dPb2
75lWfz+HD3KvuGm4nwAAAAZiS0dEAAAAAAAA+UO7fwAAAAlwSFlzAAALEwAACxMBAJqcGAAAAAd0
SU1FB+QHHQEHK7NtpdYAAAFDSURBVFjD1VfdkcQgCMbEhujAWmgEbSS1bAeWdPuy3hhjoqDezjHD
QxL+JHwfowGlEJHPn4/j8Jo4ZiA5F6+Dpoh9UnIAAIeIJsb4ksSzq1rbG2+7MeakZQBlt5JeCrIV
v7K9TERP3yW2DAChVQB0FDXL9vwLviEnFMQYX4hoAMAtyneBqhFC7RRM2PoqT1jNKWpwyoaPh3hA
c4q8oE8hLJ4BIvKI6BDR3QTootqHOfplSiLyiTG3O8JYJExEPznB7b0DJ6HkTjQ5RDTbCnL5V0S0
SaC3hAkl/6t310vmyiYMd2w8BgA/eOBQ8oaUiptokPpaBY7hhoq9BjF/uYyqXbDK5NO4YVcm18oF
TV8nIqsgIp5oWy0gFI6nwWns+5ZteKTizDkkHbmYfHxDptBEwehNSBpPfDd82B2qbhntyWbdId+Y
VsKPb8/xvQAAAABJRU5ErkJggg=='''

window_button_data = '''iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAABhWlDQ1BJQ0MgcHJvZmlsZQAAKJF9
kT1Iw0AcxV9TpSIVhZYi4pChOlkQFXGUKhbBQmkrtOpgcumH0KQhSXFxFFwLDn4sVh1cnHV1cBUE
wQ8QJ0cnRRcp8X9JoUWMB8f9eHfvcfcOEBoVpppd44CqWUY6ERdz+RUx8IoABhBBCBGJmXoys5CF
5/i6h4+vdzGe5X3uz9GnFEwG+ETiWaYbFvE68fSmpXPeJw6zsqQQnxOPGXRB4keuyy6/cS45LPDM
sJFNzxGHicVSB8sdzMqGSjxFHFVUjfKFnMsK5y3OaqXGWvfkLwwWtOUM12kOI4FFJJGCCBk1bKAC
CzFaNVJMpGk/7uEfcvwpcsnk2gAjxzyqUCE5fvA/+N2tWZyccJOCcaD7xbY/RoDALtCs2/b3sW03
TwD/M3Cltf3VBjDzSXq9rUWPgP5t4OK6rcl7wOUOMPikS4bkSH6aQrEIvJ/RN+WB0C3Qu+r21trH
6QOQpa6WboCDQ2C0RNlrHu/u6ezt3zOt/n4AYURyoPOpy9cAAAAGYktHRAC6AAAAXbbuhoMAAAAJ
cEhZcwAACxMAAAsTAQCanBgAAAAHdElNRQfkBxECDhsM5i/SAAAAmElEQVQ4y62S0Q3DIAxETcQg
2aQdBXmRkEVOHYVskm7SHyxZxIag5r4sWTyfDwdyxMyFiAr5SgDW0Hn8orG+0WkI4HBcvGv/EwcT
CoBsOMzicKE/FTuB7WpaArCaABVYNzRmPi1InAnMXeFuYLUW6AVwR1vrbhaw68cA5gDWis/cgVhS
IbW/0AWkWo9uwQQFORLvn3VgVuMHH4U3H+kUAk4AAAAASUVORK5CYII='''


exit_button_dark_data = '''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'''

max_button_dark_data = '''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
AAAAAElFTkSuQmCC'''

mini_button_dark_data = '''iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAADEnpUWHRSYXcgcHJvZmlsZSB0eXBl
IGV4aWYAAHja7ZZRktwoDIbfOUWOgCSExHEwmKq9QY6fH+z2dM/07Gay85CkxpQBCyzk/xN0h/37
PyN8w0Ule0hqnkvOEVcqqXBFx+NxlVVTTKs+H+Kt82AP1wDDJGjleLR6zq+w68sLtzVoe7QHP0fY
T0c3z6dDmSszOv0+SNj5sFM6HZX96OTidh/qxkfbzokrlPMWW64vJ/M53BuSQaWumCXMu5BE1Cxn
BHLcFbehZnHMI0noq2hYAzcVIcjD510CxnuBHkS+9cJr9a/eK/G5nnZ5pWU+NULn6QDpc/GXxHcL
yxURPw4Ae37zOec9Rvcx9uPraspQNJ8ZFcNNnfkOJm6QXNZrGcVwK/q2SkHxWGMDnB5b3FAaFWJQ
GYESdao0aF9to4YQE+9saJkby7K5GBducnBCocEmRbo4+DXegwjMfMVCa92y1mvkWLkTpjLBGeGV
d0v4t8GPlDBGmxJR9EsrxMUzcxHGJDdrzAIQGic3XQLfyok/3uUPUhUEdcns+MAat8PFpvSSW7I4
C+Yp2mNXULB+OoBEWFsRDAkIxEyilCkasxFBRwegishZEm8gQKrcESQnkczBGFsGa+MdozWXlTNP
M84mgFDJ2FsOQhWwUlLkjyVHDlVssaSqWU09aNGaJaesOWfL85CrJpZMLZuZW7Hq4snVs5u7F6+F
i+AM1JKLFS+l1MqhYqEKXxXzKywbb7KlTbe82eZb2WpD+rTUtOVmzVtptXOXjmOi527de+l1p7Dj
pNjTrnvebfe97HUg14aMNHTkYcNHGfWidlJ9Uz5AjU5qvEjNeXZRgzWY3VzQPE50MgMxTgTiNgkg
oXkyi04p8SQ3mcXC2BTKCFInm9BpEgPCtBProIvdC7mf4hbUf4ob/xe5MNF9BrkAdG+5PaHW5+9c
W8SOXTg1jYLdh/Hda2Cv80et/t/2y9GXo7/A0bBeVz/GWxteG361fc+RtFjfX/5JGz4lnN/X0YcF
edKGXw7jbvVpCJ+Uj1+Ovhz9wY7wV6KEHxvIojYbNf8fAAABhGlDQ1BJQ0MgcHJvZmlsZQAAeJx9
kT1Iw0AcxV9TpSIVQTuIdMhQnSyIXzhKFYtgobQVWnUwufQLmjQkKS6OgmvBwY/FqoOLs64OroIg
+AHi5Oik6CIl/i8ptIjx4Lgf7+497t4BQqPCVLNrHFA1y0jFY2I2tyoGXhFAGAOYRkhipp5IL2bg
Ob7u4ePrXZRneZ/7c/QpeZMBPpF4jumGRbxBPLNp6Zz3iUOsJCnE58RjBl2Q+JHrsstvnIsOCzwz
ZGRS88QhYrHYwXIHs5KhEk8RRxRVo3wh67LCeYuzWqmx1j35C4N5bSXNdZphxLGEBJIQIaOGMiqw
EKVVI8VEivZjHv5hx58kl0yuMhg5FlCFCsnxg//B727NwuSEmxSMAd0vtv0xAgR2gWbdtr+Pbbt5
AvifgSut7a82gNlP0uttLXIE9G8DF9dtTd4DLneAoSddMiRH8tMUCgXg/Yy+KQcM3gK9a25vrX2c
PgAZ6mr5Bjg4BEaLlL3u8e6ezt7+PdPq7wfFSHLIn3w0IAAAAAZiS0dEAIoAKwBfzdn2KAAAAAlw
SFlzAAALEwAACxMBAJqcGAAAAAd0SU1FB+QHHBI3AGZLECkAAABaSURBVDjL7dKxCYBAAEPRJ7iP
ncO4iNVVVzqBvRO4glu4gOACgljYnL1no4UfUibwIfy8TwEhhAFTbjnG2Bep3OBIucuOtkSHGjO2
jIEN46VQYX2gsPwv+AInX5UUIaz+DwkAAAAASUVORK5CYII='''

search_bar_dark_data = '''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
B3RJTUUH5AccEjcIaJCYGwAAABl0RVh0Q29tbWVudABDcmVhdGVkIHdpdGggR0lNUFeBDhcAAAIw
SURBVHja7d0rbhtRFIfxL1NcVkWqVxDYkgCTYQFBzi4iJRtIpVvQC4xaZEvB3YCLAgwHmFYqMipM
pSyhUqWCOTeepnnYHgfl+5GRxg9wwF/nzn3MHk9IKQ2BY2AIHAD7wCskvTR/gBtgCSyAq5zz4rEf
7D0SLCfAKXBkXSU9YA5c5pxnawVMSmkAXADnndsL4Cquy5zzL+sqvSwppbcxiumOaooJMM45Xz8Y
MCml98BHYBS3ZpFOc8sr6U5eHMUo5yRufQM+5Zy//xcw0blMI1yuI40mllHSE0FzHqOeQYTMWelk
qs73Ljrhcma4SFpHZMVZZMcosgSI2aB4oPs57n3IOX+1bJLW1TTNsq7r37TPZg7ruv7RNM2ydDCn
cZ3ZuUjq0cnMuplSxTqXMhV9aZkk9VAy5CilNKyipQFYOFskqWcXM6ddzgJwXLGay76yPJJ2oGTJ
sKJdOEMndSSpj5IlBxXt3iJo9xdIUl8lS/YrayHpuVS0uyPpDJUkqY+SJTdVp50ZWhdJO1CyZFnR
mVKyLpJ24HbpS0VnSil2R0rSViJDbpe+VHEiVVlgd2qJJPVQMmSec16UWaSyvPcktl5L0qbdyzmr
s2EuIXZTx07IN8Ah8K6u659N07guRtK64TICxsBrYJJz/gL/ngczpj0sZgBM7WQkbdC5TFkdODUu
n3lkpqRtg2X9IzM7P/LQb0n3BUq/Q7/v/JmvLZH0lM1eW3JP0PjiNUmwxYvX/gI+nLs+npm0IgAA
AABJRU5ErkJggg=='''

search_button_dark_data = '''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
uYb+AsfjpJ126HnOAAAAAElFTkSuQmCC'''

settings_button_dark_data = '''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
RU5ErkJggg=='''

window_button_dark_data = '''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
dWBW4wcXtDgS1+4q4gAAAABJRU5ErkJggg=='''
####################################################################################################

# Theme variables
background = None
title_bg = None
title_fg = None
header_bg = None
top_menu_bg = None
side_bar_bg = None
text_bg = None
text_fg = None
result_fg = None
pap_fg = None
highlight_bg = None
settings_bg = None
tab_bg = None
tab_fg = None
button_bg = None

# Create dirctories
if not os.path.exists(data_dir):
    os.makedirs(data_dir)
if not os.path.exists(unipath(logo_path)):
    logo_data = base64.b64decode(logo)
    logo_file = open(unipath(logo_path),'wb')
    logo_file.write(logo_data)
    logo_file.close()
    study_logo_data = base64.b64decode(study_logo)
    study_logo_file = open(unipath(study_logo_path),'wb')
    study_logo_file.write(study_logo_data)
    study_logo_file.close()
if not themes_dir.exists():
    os.makedirs(themes_dir)
if not os.path.exists(unipath.joinpath(themes_dir,'default')):
    os.makedirs(unipath.joinpath(themes_dir,'default'))
if not os.path.exists(unipath.joinpath(themes_dir,'dark')):
    os.makedirs(unipath.joinpath(themes_dir,'dark'))
if not words_l_dir.exists():
    os.makedirs(words_l_dir)

# Create default theme
if not os.path.exists(unipath.joinpath(themes_dir,'default','theme.ini')):
    default_theme_info = configparser.ConfigParser()
    default_theme_info.add_section('Theme')
    default_theme_info.set('Theme','background','#FEFFFE')
    default_theme_info.set('Theme','title_bg','#dfe0df')
    default_theme_info.set('Theme','title_fg','#000000')
    default_theme_info.set('Theme','header_bg','#f2f2f2')
    default_theme_info.set('Theme','top_menu_bg','#babbba')
    default_theme_info.set('Theme','side_bar_bg','#f2f2f2')
    default_theme_info.set('Theme','text_bg','#e7e7e7')
    default_theme_info.set('Theme','text_fg','#000000')
    default_theme_info.set('Theme','result_fg','#000000')
    default_theme_info.set('Theme','pap_fg','#000000')
    default_theme_info.set('Theme','highlight_bg','#ff5d97')
    default_theme_info.set('Theme','settings_bg','#f2f2f2')
    default_theme_info.set('Theme','tab_bg','#f2f2f2')
    default_theme_info.set('Theme','tab_fg','#000000')
    default_theme_info.set('Theme','button_bg','#f2f2f2')
    default_theme_file = open(unipath.joinpath(themes_dir,'default','theme.ini'),'w',encoding='utf-8')
    default_theme_info.write(default_theme_file)
    default_theme_file.close()
# Create dark theme
if not os.path.exists(unipath.joinpath(themes_dir,'dark','theme.ini')):
    dark_theme_info = configparser.ConfigParser()
    dark_theme_info.add_section('Theme')
    dark_theme_info.set('Theme','background','#262626')
    dark_theme_info.set('Theme','title_bg','#303030')
    dark_theme_info.set('Theme','title_fg','#FFFFFF')
    dark_theme_info.set('Theme','header_bg','#3b3b3b')
    dark_theme_info.set('Theme','top_menu_bg','#474747')
    dark_theme_info.set('Theme','side_bar_bg','#3b3b3b')
    dark_theme_info.set('Theme','text_bg','#303030')
    dark_theme_info.set('Theme','text_fg','#FFFFFF')
    dark_theme_info.set('Theme','result_fg','#FFFFFF')
    dark_theme_info.set('Theme','pap_fg','#FFFFFF')
    dark_theme_info.set('Theme','highlight_bg','#ff5d97')
    dark_theme_info.set('Theme','settings_bg','#595959')
    dark_theme_info.set('Theme','tab_bg','#3b3b3b')
    dark_theme_info.set('Theme','tab_fg','#FFFFFF')
    dark_theme_info.set('Theme','button_bg','#3b3b3b')
    dark_theme_file = open(unipath.joinpath(themes_dir,'dark','theme.ini'),'w',encoding='utf-8')
    dark_theme_info.write(dark_theme_file)
    dark_theme_file.close()

# Create default theme images
if not os.path.exists(unipath.joinpath(themes_dir,'default','exit.png')):
    exit_data = base64.b64decode(exit_button_data)
    exit_button_file = open(unipath.joinpath(themes_dir,'default','exit.png'),'wb')
    exit_button_file.write(exit_data)
    exit_button_file.close()
if not os.path.exists(unipath.joinpath(themes_dir,'default','max.png')):
    max_data = base64.b64decode(max_button_data)
    max_button_file = open(unipath.joinpath(themes_dir,'default','max.png'),'wb')
    max_button_file.write(max_data)
    max_button_file.close()
if not os.path.exists(unipath.joinpath(themes_dir,'default','mini.png')):
    mini_data = base64.b64decode(mini_button_data)
    mini_button_file = open(unipath.joinpath(themes_dir,'default','mini.png'),'wb')
    mini_button_file.write(mini_data)
    mini_button_file.close()
if not os.path.exists(unipath.joinpath(themes_dir,'default','search-bar.png')):
    search_bar_data = base64.b64decode(search_bar_data)
    search_bar_file = open(unipath.joinpath(themes_dir,'default','search-bar.png'),'wb')
    search_bar_file.write(search_bar_data)
    search_bar_file.close()
if not os.path.exists(unipath.joinpath(themes_dir,'default','search-button.png')):
    search_data = base64.b64decode(search_button_data)
    search_button_file = open(unipath.joinpath(themes_dir,'default','search-button.png'),'wb')
    search_button_file.write(search_data)
    search_button_file.close()
if not os.path.exists(unipath.joinpath(themes_dir,'default','settings.png')):
    settings_data = base64.b64decode(settings_button_data)
    settings_button_file = open(unipath.joinpath(themes_dir,'default','settings.png'),'wb')
    settings_button_file.write(settings_data)
    settings_button_file.close()
if not os.path.exists(unipath.joinpath(themes_dir,'default','window.png')):
    window_data = base64.b64decode(window_button_data)
    window_button_file = open(unipath.joinpath(themes_dir,'default','window.png'),'wb')
    window_button_file.write(window_data)
    window_button_file.close()

# Create dark theme images
if not os.path.exists(unipath.joinpath(themes_dir,'dark','exit.png')):
    exit_data = base64.b64decode(exit_button_dark_data)
    exit_button_file = open(unipath.joinpath(themes_dir,'dark','exit.png'),'wb')
    exit_button_file.write(exit_data)
    exit_button_file.close()
if not os.path.exists(unipath.joinpath(themes_dir,'dark','max.png')):
    max_data = base64.b64decode(max_button_dark_data)
    max_button_file = open(unipath.joinpath(themes_dir,'dark','max.png'),'wb')
    max_button_file.write(max_data)
    max_button_file.close()
if not os.path.exists(unipath.joinpath(themes_dir,'dark','mini.png')):
    mini_data = base64.b64decode(mini_button_dark_data)
    mini_button_file = open(unipath.joinpath(themes_dir,'dark','mini.png'),'wb')
    mini_button_file.write(mini_data)
    mini_button_file.close()
if not os.path.exists(unipath.joinpath(themes_dir,'dark','search-bar.png')):
    search_bar_data = base64.b64decode(search_bar_dark_data)
    search_bar_file = open(unipath.joinpath(themes_dir,'dark','search-bar.png'),'wb')
    search_bar_file.write(search_bar_data)
    search_bar_file.close()
if not os.path.exists(unipath.joinpath(themes_dir,'dark','search-button.png')):
    search_data = base64.b64decode(search_button_dark_data)
    search_button_file = open(unipath.joinpath(themes_dir,'dark','search-button.png'),'wb')
    search_button_file.write(search_data)
    search_button_file.close()
if not os.path.exists(unipath.joinpath(themes_dir,'dark','settings.png')):
    settings_data = base64.b64decode(settings_button_dark_data)
    settings_button_file = open(unipath.joinpath(themes_dir,'dark','settings.png'),'wb')
    settings_button_file.write(settings_data)
    settings_button_file.close()
if not os.path.exists(unipath.joinpath(themes_dir,'dark','window.png')):
    window_data = base64.b64decode(window_button_dark_data)
    window_button_file = open(unipath.joinpath(themes_dir,'dark','window.png'),'wb')
    window_button_file.write(window_data)
    window_button_file.close()

# Create master list
if not os.path.exists(unipath.joinpath(words_l_dir,'master.lst')):
    with h5.File(unipath.joinpath(words_l_dir,'master.lst'),'w') as f:
        word = f.create_group('おはよう')
        word.attrs['hira'] = 'おはよう'
        word.attrs['romaji'] = 'ohayō'
        word.attrs['translation'] = 'Good morning'
        word.attrs['mora'] = '4'
        word.attrs['pap'] = '0'
        word.attrs['notes'] = 'Used informally until ~11:00 AM'
        f.close()

# Study data function
def open_study_data():
    return h5.File(unipath.joinpath(data_dir,'study.dat'),'a')
def close_study_data(file):
    file.close()
def create_study_data(word):
    global study_data
    if not word in study_data:
        wordGrp = study_data.create_group(word)
        wordGrp.attrs['seen'] = 0
        wordGrp.attrs['pass'] = 0
        wordGrp.attrs['fail'] = 0
        wordGrp.attrs['average time'] = 0
        return
    else:
        return

# Create study data
if not os.path.exists(unipath.joinpath(data_dir,'study.dat')):
    study_data = open_study_data()
    create_study_data('おはよう')
    study_data.close()
    

# Create settings
def create_new_settings():
    global active_theme
    new_settings_info = configparser.ConfigParser()
    new_settings_info.add_section('Settings')
    new_settings_info.set('Settings','theme','default')
    new_settings_info.set('Settings','romaji','true')
    active_theme = 'default'
    new_settings_file = open(settings_dir,'w',encoding='utf-8')
    new_settings_info.write(new_settings_file)
    new_settings_file.close()
# Gather settings
if not path.exists(settings_dir):
    create_new_settings()
settings_info = configparser.ConfigParser()
settings_info.read(settings_dir,encoding='utf-8')
if settings_info.has_section('Settings') == False:
    os.remove(settings_dir)
    create_new_settings()
else:
    if settings_info.has_option('Settings','theme') == False:
        settings_info.set('Settings','theme','default')
    if settings_info.has_option('Settings','romaji') == False:
        settings_info.set('Settings','romaji','1')
    settings_file = open(settings_dir,'w',encoding='utf-8')
    settings_info.write(settings_file)
    settings_file.close()
active_theme = settings_info.get('Settings','theme')
show_romaji = settings_info.get('Settings','romaji').lower()

# Create root tk w;indow
if os.name == 'nt':
    psuedo = tk.Tk()
if os.name == 'posix':
    root = tk.Tk()

# Load Theme
def load_theme():
    # Misc
    global active_theme
    global themes_dir
    # Colors
    global background
    global title_bg
    global title_fg
    global header_bg
    global top_menu_bg
    global side_bar_bg
    global text_bg
    global text_fg
    global result_fg
    global pap_fg
    global highlight_bg
    global settings_bg
    global tab_bg
    global tab_fg
    global button_bg
    # Image/icon
    global search_bar_path
    global search_button_path
    global exit_button_path
    global max_button_path
    global window_button_path
    global mini_button_path
    global settings_button_path
    global search_bar_image
    global search_button_image
    global exit_button_image
    global max_button_image
    global window_button_image
    global mini_button_image
    global settings_button_image

    default_theme_info = configparser.ConfigParser()
    default_theme_info.read(unipath.joinpath(themes_dir,'default','theme.ini'),encoding='utf-8')
    theme_info = configparser.ConfigParser()
    theme_info.read(unipath.joinpath(themes_dir,active_theme,'theme.ini'),encoding='utf-8')
    if theme_info.has_option('Theme','background'):
        background = theme_info.get('Theme','background')
    else:
        background = default_theme_info.get('Theme','background')
    if theme_info.has_option('Theme','title_bg'):
        title_bg = theme_info.get('Theme','title_bg')
    else:
        title_bg = default_theme_info.get('Theme','title_bg')
    if theme_info.has_option('Theme','title_fg'):
        title_fg = theme_info.get('Theme','title_fg')
    else:
        title_fg = default_theme_info.get('Theme','title_fg')
    if theme_info.has_option('Theme','header_bg'):
        header_bg = theme_info.get('Theme','header_bg')
    else:
        header_bg = default_theme_info.get('Theme','header_bg')
    if theme_info.has_option('Theme','top_menu_bg'):
        top_menu_bg = theme_info.get('Theme','top_menu_bg')
    else:
        top_menu_bg = default_theme_info.get('Theme','top_menu_bg')
    if theme_info.has_option('Theme','side_bar_bg'):
        side_bar_bg = theme_info.get('Theme','side_bar_bg')
    else:
        side_bar_bg = default_theme_info.get('Theme','side_bar_bg')
    if theme_info.has_option('Theme','text_bg'):
        text_bg = theme_info.get('Theme','text_bg')
    else:
        text_bg = default_theme_info.get('Theme','text_bg')
    if theme_info.has_option('Theme','text_fg'):
        text_fg = theme_info.get('Theme','text_fg')
    else:
        text_fg = default_theme_info.get('Theme','text_fg')
    if theme_info.has_option('Theme','result_fg'):
        result_fg = theme_info.get('Theme','result_fg')
    else:
        result_fg = default_theme_info.get('Theme','result_fg')
    if theme_info.has_option('Theme','pap_fg'):
        pap_fg = theme_info.get('Theme','pap_fg')
    else:
        pap_fg = default_theme_info.get('Theme','pap_fg')
    if theme_info.has_option('Theme','highlight_bg'):
        highlight_bg = theme_info.get('Theme','highlight_bg')
    else:
        highlight_bg = default_theme_info.get('Theme','highlight_bg')
    if theme_info.has_option('Theme','settings_bg'):
        settings_bg = theme_info.get('Theme','settings_bg')
    else:
        settings_bg = default_theme_info.get('Theme','settings_bg')
    if theme_info.has_option('Theme','tab_bg'):
        tab_bg = theme_info.get('Theme','tab_bg')
    else:
        tab_bg = default_theme_info.get('Theme','tab_bg')
    if theme_info.has_option('Theme','tab_fg'):
        tab_fg = theme_info.get('Theme','tab_fg')
    else:
        tab_fg = default_theme_info.get('Theme','tab_fg')
    if theme_info.has_option('Theme','button_bg'):
        button_bg = theme_info.get('Theme','button_bg')
    else:
        button_bg = default_theme_info.get('Theme','button_bg')
    # Images/icons
    if not os.path.exists(unipath.joinpath(themes_dir,active_theme,'search-bar.png')):
        search_bar_path = unipath.joinpath(themes_dir,'default','search-bar.png')
    else:
        search_bar_path = unipath.joinpath(themes_dir,active_theme,'search-bar.png')
    search_bar_image = ImageTk.PhotoImage((Image.open(search_bar_path)).resize((280,26)))
    if not os.path.exists(unipath.joinpath(themes_dir,active_theme,'search-button.png')):
        search_button_path = unipath.joinpath(themes_dir,'default','search-button.png')
    else:
        search_button_path = unipath.joinpath(themes_dir,active_theme,'search-button.png')
    search_button_image = ImageTk.PhotoImage((Image.open(search_button_path)).resize((22,22)))
    if not os.path.exists(unipath.joinpath(themes_dir,active_theme,'exit.png')):
        exit_button_path = unipath.joinpath(themes_dir,'default','exit.png')
    else:
        exit_button_path = unipath.joinpath(themes_dir,active_theme,'exit.png')
    exit_button_image = ImageTk.PhotoImage((Image.open(exit_button_path)).resize((12,12)))
    if not os.path.exists(unipath.joinpath(themes_dir,active_theme,'max.png')):
        max_button_path = unipath.joinpath(themes_dir,'default','max.png')
    else:
        max_button_path = unipath.joinpath(themes_dir,active_theme,'max.png')
    max_button_image = ImageTk.PhotoImage((Image.open(max_button_path)).resize((12,12)))
    if not os.path.exists(unipath.joinpath(themes_dir,active_theme,'window.png')):
        window_button_path = unipath.joinpath(themes_dir,'default','window.png')
    else:
        window_button_path = unipath.joinpath(themes_dir,active_theme,'window.png')
    window_button_image = ImageTk.PhotoImage((Image.open(window_button_path)).resize((12,12)))
    if not os.path.exists(unipath.joinpath(themes_dir,active_theme,'mini.png')):
        mini_button_path = unipath.joinpath(themes_dir,'default','mini.png')
    else:
        mini_button_path = unipath.joinpath(themes_dir,active_theme,'mini.png')
    mini_button_image = ImageTk.PhotoImage((Image.open(mini_button_path)).resize((12,12)))
    if not os.path.exists(unipath.joinpath(themes_dir,active_theme,'settings.png')):
        settings_button_path = unipath.joinpath(themes_dir,'default','settings.png')
    else:
        settings_button_path = unipath.joinpath(themes_dir,active_theme,'settings.png')
    settings_button_image = ImageTk.PhotoImage((Image.open(settings_button_path)).resize((16,16)))

load_theme()

# Configure windows
def show_root(event):
    root.deiconify()
if os.name == 'nt':
    psuedo.configure(bg=background)
    psuedo.attributes('-alpha',0)
    psuedo.title('Pitchi')
    psuedo.after(1,psuedo.minsize(1000,500))
    
    psuedo.bind('<FocusIn>',show_root)

    root = tk.Toplevel()
    root.minsize(1000,500)
    root.configure(bg=background)
    root.overrideredirect(True)
if os.name == 'posix':
    root.minsize(1000,500)
    root.configure(bg=background)

# Update Theme
style = ttk.Style()
style.element_create('Custom.Notebook.tab','from','default')
style.layout('TNotebook.Tab',[('Custom.Notebook.tab', {'children':[('Notebook.padding', {'side': 'top', 'children':[('Notebook.focus', {'side': 'top', 'children':[('Notebook.label', {'side': 'top', 'sticky': ''})],'sticky': 'nswe'})],'sticky': 'nswe'})],'sticky': 'nswe'})])
style.configure('TNotebook',background=background,borderwidth=0,relief='flat')
style.configure('TNotebook.Tab',background=tab_bg,foreground=tab_fg)
current_theme = style.theme_use()

# Set Icon
if os.name == 'nt':
    if os.path.exists(unipath(icon_path)):
        root.iconbitmap(unipath.joinpath(icon_path))
    else:
        icon_data = base64.b64decode(icon)
        icon_file = open(unipath.joinpath(icon_path),'wb')
        icon_file.write(icon_data)
        icon_file.close() 
        root.iconbitmap(unipath.joinpath(icon_path))

# Utility variables
root_size = 'window'
root_last_xpos = 0
root_last_ypos = 0
word_count = 0
word_count_label_var = tk.StringVar()
active_list_label_var = tk.StringVar()
title_label_var = tk.StringVar()
title_label_var.set('Pitchi')
active_list = 'master'
active_list_label_var.set('Current list: ' + active_list.capitalize())
window_mode_called = False
side_bar_list_global = None
settings = None
settings_psuedo = None
settings_frame = None
dl_progress = 0
result_scroll = False
search_var = tk.StringVar()
internal_word_list = []
internal_hira_list = []
internal_romaji_list = []
internal_trans_list = []
mora_offset = 0
return_button_color = None
study_mode = False
study_data = None
papImageFinal = None

# Result pages variables
currentPage = 0
page_list = []
page_count = 0
resultContainerList = ['']
resultCanvasList = ['']
result_romaji_label_list = ['']
result_label_list = ['']
result_notes_label_list = ['']
result_hira_container_list = ['']
result_hira_canvas_list = ['']
result_pap_container_list = ['']
result_pap_canvas_list = ['']
result_trans_label_list = ['']
result_notes_label_list = ['']
notes_seperator_list = ['']
subframe_window_list = ['']
subframe_list = ['']
space_filler_list = ['']
word_hira_list = []
word_romaji_list = []
word_trans_list = []
word_mora_list = []
word_pap_list = []
word_notes_list = []

# Threads
thread1 = None

# Word Variables
word_pap = ''
word_mora = ''

# Generate study data
# Open active list
with h5.File(unipath.joinpath(words_l_dir,active_list + '.lst'),'r') as f:
    # Open study data
    with open_study_data() as g:
        study_data = g
        wordsList = list(f.keys())
        for i in wordsList:
            create_study_data(i)
        g.close()
    f.close()

# Configure windows
if os.name == 'nt':
    psuedo.iconbitmap(icon_path)

window_width = 1000
window_height = 500

screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()

x_cord = (screen_width/2) - (window_width/2)
y_cord = (screen_height/2) - (window_height/2)
root.geometry('%dx%d+%d+%d' % (window_width,window_height,x_cord,y_cord))

header_list = ['Check out Dogen','Perfect pitch is teachable','Its not a fruit','Jubilate, its more than just coffee','No school tomorrow, tell your friends','Keep on going on','Not a game... practice','It builds character','あなたは私を理解できますか？','Where does a snowman go to dance?','Stan LOONA','JinSoul','Choerry','ViVi','Wheres your bread now?','Cheyroo','This is my whole weekend']
root.title('Pitchi - '+random.choice(header_list))

# Commands
def lower_currentPage(*a):
    global currentPage
    global page_count
    currentPage -= 1
    page_count -= 1
def adjust_page_canvas(*event):
    global currentPage
    currentPage = (result_notebook.index(result_notebook.select()))
    add_word_notes_textbox.change(index=0,minsize=add_word_canvas.winfo_height()-380)
    add_word_canvas.moveto(add_word_notes_textbox_window,20,((add_word_canvas.winfo_height()/2)-(add_word_notes_textbox.winfo_height()/2))+135)
    add_word_canvas.moveto(add_word_add_button_window,160,(add_word_canvas.winfo_height())-40)
    if currentPage == 0:
        welcomeFrame.configure(scrollregion=(welcomeSubframe.bbox('all')))
        welcome_title.configure(font=('Quattrocento Sans',clamp(math.floor(result_canvas.winfo_width()/24),22,38),'bold'))
        welcome_subtitle.configure(font=('Quattrocento Sans',clamp(math.floor(result_canvas.winfo_width()/48),16,22)))
        welcome_heading1.configure(font=('Quattrocento Sans',clamp(math.floor(result_canvas.winfo_width()/36),18,22),'bold'))
        welcome_paragraph1.configure(font=('Quattrocento Sans',clamp(math.floor(result_canvas.winfo_width()/64),12,14)),width=result_canvas.winfo_width()-80)
        welcome_heading2.configure(font=('Quattrocento Sans',clamp(math.floor(result_canvas.winfo_width()/36),18,22),'bold'))
        welcome_paragraph2.configure(font=('Quattrocento Sans',clamp(math.floor(result_canvas.winfo_width()/64),12,14)),width=result_canvas.winfo_width()-80)
        welcomeFrame.moveto(welcomeWindow,0,0)
        welcomeFrame.itemconfigure(welcomeWindow,width=result_canvas.winfo_width())
    else:
        result_label_list[currentPage].change(bg=background,fg=text_fg)
        result_romaji_label_list[currentPage].change(bg=background,fg=text_fg,font=('Quattrocento Sans',clamp(math.floor(result_canvas.winfo_width()/30),18,28)))
        result_trans_label_list[currentPage].change(bg=background,fg=text_fg,font=('Quattrocento Sans',clamp(math.floor(result_canvas.winfo_width()/34),16,22)))
        result_notes_label_list[currentPage].configure(bg=background,fg=text_fg,font=('Quattrocento Sans',clamp(math.floor(result_canvas.winfo_width()/48),10,16)))
        notes_seperator_list[currentPage].configure(bg=background,fg=text_fg,font=('Quattrocento Sans',clamp(math.floor(result_canvas.winfo_width()/40),14,20)))
        resultCanvasList[currentPage].moveto(subframe_window_list[currentPage],(result_canvas.winfo_width()/2)-(subframe_list[currentPage].winfo_width()/2),0)
        space_filler_list[currentPage].configure(bg=background,width=result_canvas.winfo_width())
        redraw_pap(currentPage)
def scroll_result_page(event):
    if currentPage != 0:
        if resultCanvasList[currentPage].yview() != (0.0,1.0) and result_scroll == True:
            resultCanvasList[currentPage].yview_scroll(int(-1*(event.delta/120)),'units')
    else:
        if welcomeFrame.yview() != (0.0,1.0) and result_scroll == True:
            welcomeFrame.yview_scroll(int(-1*(event.delta/120)),'units')
def add_result_page(search,notebook,new_page,word,hira,romaji,trans,mora,pap,notes):
    global resultContainerList
    global resultCanvasList
    global result_romaji_label_list
    global result_label_list
    global result_notes_label_list
    global result_hira_container_list
    global result_hira_canvas_list
    global result_pap_container_list
    global result_pap_canvas_list
    global result_trans_label_list
    global result_notes_label_list
    container = tk.Frame(notebook,bg=background)
    resultContainerList.insert(new_page,container)
    container.grid(row=0,column=0,sticky='nsew')
    container.columnconfigure(1,weight=1)
    container.rowconfigure(0,weight=1)
    canvas = tk.Canvas(container,bg=background,highlightthickness=0,borderwidth=0)
    scrollbar = tk.Scrollbar(container,command=canvas.yview,width=15)
    canvas.configure(yscrollcommand=scrollbar.set,scrollregion=(0,0,100,700))
    scrollbar.grid(row=0,column=0,sticky='nsew')
    canvas.grid(row=0,column=1,sticky='nsew')
    canvas.columnconfigure(0,weight=1)
    canvas.rowconfigure(0,weight=1)
    resultCanvasList.insert(new_page,canvas)
    notebook.add(container,text=word)
    subframe_list.insert(new_page,tk.Frame(canvas,bg=background,width=result_canvas.winfo_width()))
    subframe = subframe_list[new_page]
    subframe.grid(row=0,column=0,sticky='nsew')
    subframe.rowconfigure(4,minsize=50)
    style.theme_settings(current_theme,{'TNotebook.Tab':{'configure':{'padding':[(result_canvas.winfo_width()-get_tab_length(False))/((page_count+2)*2), 0],'font':('Quattrocento Sans','10')}}})
    ################
    result_label_list.insert(new_page,static_label(subframe,text=word,font=('MS PMincho',24),height=80,bg=background,fg=result_fg))
    result_romaji_label_list.insert(new_page,static_label(subframe,text=romaji,font=('MS PMincho',20),height=40,bg=background,fg=result_fg))
    result_hira_container_list.insert(new_page,tk.Frame(subframe))
    result_hira_canvas_list.insert(new_page,tk.Canvas(result_hira_container_list[new_page],bg=background,highlightthickness=0))
    result_hira_canvas_list[new_page].grid(row=0,column=0)
        
    result_pap_container_list.insert(new_page,tk.Frame(subframe,bg=background))
    result_pap_canvas_list.insert(new_page,tk.Canvas(result_pap_container_list[new_page],highlightthickness=0,height=200,bg=background))
    result_pap_canvas_list[new_page].grid(row=0,column=0)

    space_filler_list.insert(new_page,tk.Canvas(subframe,bg=background,height=50,highlightthickness=0,width=result_canvas.winfo_width()))
    space_filler = space_filler_list[new_page]

    notes_seperator_list.insert(new_page,tk.Label(subframe,bg=header_bg,font=('MS PMincho',18),text='Notes:',fg=text_fg,anchor='w',padx=10))

    result_trans_label_list.insert(new_page,static_label(subframe,text=trans,font=('MS PMincho',22),bg=background,fg=result_fg,anchor='c'))
    result_notes_label_list.insert(new_page,tk.Message(subframe,text=notes,font=('MS PMincho',22),width=result_canvas.winfo_width(),bg=background,fg=result_fg,justify='left',anchor='w'))

    result_label_list[new_page].grid(row=0,column=0)
    if show_romaji == 'true':
        result_romaji_label_list[new_page].grid(row=1,column=0)
    result_pap_container_list[new_page].grid(row=2,column=0)
    result_hira_container_list[new_page].grid(row=3,column=0)
    result_trans_label_list[new_page].grid(row=5,column=0)
    space_filler.grid(row=6,column=0,sticky='nsew')
    notes_seperator_list[new_page].grid(row=7,column=0,sticky='ew')
    result_notes_label_list[new_page].grid(row=8,column=0,sticky='ew')
    draw_pap(pap,mora,word,new_page)
    subframe_window_list.insert(new_page,canvas.create_window((result_canvas.winfo_width()/2)-(subframe_list[new_page].winfo_width()/2),100,window=subframe))
    thread1 = threading.Timer(0.01,adjust_page_canvas)
    thread1.start()
    ################
    return container
def solid_circle(scx,scy,draw,spacing):
    size = (spacing*0.2)*4
    scx = scx*4
    scy = scy*4
    draw.ellipse([scx-size,scy-size,scx+size,scy+size],fill=pap_fg)
    return
def hallow_circle(scx,scy,draw,spacing):
    size = (spacing*0.2)*4
    scx = scx*4
    scy = scy*4
    draw.ellipse([scx-size,scy-size,scx+size,scy+size],fill=background,outline=pap_fg,width=12)
    return
def connecting_line(clx,cly,cly2,draw,spacing):
    clx = clx*4
    cly = cly*4
    cly2 = cly2*4
    spacing = spacing*4
    draw.line([clx,cly,clx+(spacing*1.075),cly2],fill=pap_fg,width=math.floor(clamp(spacing/18,6,20)))
    return
def check_combo(word,i):
    try:
        next_mora = word[i+1]
        if next_mora == 'ゃ' or next_mora == 'ゅ' or next_mora == 'ょ' or next_mora == 'っ':
            return True
        else:
            return False
    except IndexError:
        return False
def draw_hira(word,i,startx,spacing,page,word_mora):
    global mora_offset
    size = math.floor(spacing*0.45)
    if i+1 < len(word):
        if check_combo(word,i+mora_offset):
            hira = tk.Label(result_hira_canvas_list[page],font=('MS PMincho',size,'bold'),text=word[i+mora_offset]+word[i+mora_offset+1],bg=background,fg=text_fg,anchor='center')
            mora_offset += 1
        else:
            hira = tk.Label(result_hira_canvas_list[page],font=('MS PMincho',size,'bold'),text=word[i+mora_offset],bg=background,fg=text_fg,anchor='center')
    else:
        hira = tk.Label(result_hira_canvas_list[page],font=('MS PMincho',size,'bold'),text=word[i+mora_offset],bg=background,fg=text_fg,anchor='center')    
    result_hira_canvas_list[page].create_window(startx+(int(i)*spacing)+(size*0.4),result_hira_canvas_list[page].winfo_height()/2,window=hira)
def redraw_pap(page):
    global mora_offset
    global papImageFinal
    mora_offset = 0
    page -=1
    word_pap_list[page]
    pap_list = []
    word_pap = word_pap_list[page]
    word_mora = word_mora_list[page]
    page += 1
    root.update_idletasks()
    result_hira_canvas_list[page].delete('all')
    spacing = clamp(math.floor((resultCanvasList[page].winfo_width()/2)/int(word_mora)),1,80)
    result_pap_canvas_list[page].configure(width=spacing*int(word_mora)+spacing*1.5,height=spacing*2,bg=background)
    result_hira_canvas_list[page].configure(width=spacing*int(word_mora)+spacing*2,height=spacing*1.1,bg=background)
    root.update_idletasks()
    # Finding PAP
    if int(word_pap) == 0:
        for mora_pap in range (0,int(word_mora)):
            if mora_pap == 0:
                pap_list.append('0')
            else:
                pap_list.append('1')
        pap_list.append('1') # This is the particle
    if int(word_pap) == 1:
        for mora_pap in range (0,int(word_mora)):
            if mora_pap == 0:
                pap_list.append('1')
            else:
                pap_list.append('0')
        pap_list.append('0') # This is the particle
    if int(word_pap) == 2:
        for mora_pap in range (0,int(word_mora)):
            if mora_pap == 1:
                pap_list.append('1')
            else:
                pap_list.append('0')
        pap_list.append('0') # This is the particle
    if int(word_pap) == 3:
        for mora_pap in range (0,int(word_mora)):
            if mora_pap == 1 or mora_pap == 2:
                pap_list.append('1')
            else:
                pap_list.append('0')
        pap_list.append('1') # This is the particle
    if int(word_pap) == 4:
        for mora_pap in range (0,int(word_mora)):
            if mora_pap == 1 or mora_pap == 2 or mora_pap == 3:
                pap_list.append('1')
            else:
                pap_list.append('0')
        pap_list.append('0') # This is the particle
    if int(word_pap) == 5:
        for mora_pap in range (0,int(word_mora)):
            if mora_pap == 1 or mora_pap == 2 or mora_pap == 3 or mora_pap == 4:
                pap_list.append('1')
            else:
                pap_list.append('0')
        pap_list.append('0') # This is the particle
    if int(word_pap) == 6:
        for mora_pap in range (0,int(word_mora)):
            if mora_pap == 1 or mora_pap == 2 or mora_pap == 3 or mora_pap == 4 or mora_pap == 5:
                pap_list.append('1')
            else:
                pap_list.append('0')
        pap_list.append('0') # This is the particle
    if int(word_pap) == 7:
        for mora_pap in range (0,int(word_mora)):
            if mora_pap == 1 or mora_pap == 2 or mora_pap == 3 or mora_pap == 4 or mora_pap == 5 or mora_pap == 6:
                pap_list.append('1')
            else:
                pap_list.append('0')
        pap_list.append('0') # This is the particle
    if int(word_pap) == 8:
        for mora_pap in range (0,int(word_mora)):
            if mora_pap == 0:
                pap_list.append('0')
            else:
                pap_list.append('1')
        pap_list.append('0') # This is the particle
    # Draw pitch accent patern
    papImage = Image.new('RGB',(result_pap_canvas_list[page].winfo_width()*4,result_pap_canvas_list[page].winfo_height()*4),color=background)
    papDraw = ImageDraw.Draw(papImage)
    startx = (((math.floor(result_pap_canvas_list[page].winfo_width()/2))-((spacing)*(int(word_mora)-1))/2))
    starty = result_pap_canvas_list[page].winfo_height()-(spacing/2)
    for mora_circle in range(0,int(word_mora)+1):
        if mora_circle < int(word_mora):
            if pap_list[mora_circle] == pap_list[mora_circle+1]:
                connecting_line(startx+(spacing*mora_circle),starty-(spacing*int(pap_list[mora_circle])),starty-(spacing*int(pap_list[mora_circle+1])),papDraw,spacing)
            elif int(pap_list[mora_circle]) < int(pap_list[mora_circle+1]):
                connecting_line(startx+(spacing*mora_circle),starty-(spacing*int(pap_list[mora_circle])),(result_pap_canvas_list[page].winfo_height()-(spacing*0.560))-(spacing*int(pap_list[mora_circle+1])),papDraw,spacing)
            else: 
                connecting_line(startx+(spacing*mora_circle),starty-(spacing*int(pap_list[mora_circle])),(result_pap_canvas_list[page].winfo_height()-(spacing*0.420))-(spacing*int(pap_list[mora_circle+1])),papDraw,spacing)
    for mora_circle in range(0,int(word_mora)+1):
        if mora_circle < int(word_mora):
            solid_circle(startx+(spacing*mora_circle),starty-(spacing*int(pap_list[mora_circle])),papDraw,spacing)
            draw_hira(word_hira_list[page-1],mora_circle,startx,spacing,page,word_mora)
        else:
            hallow_circle(startx+(spacing*mora_circle),starty-(spacing*int(pap_list[mora_circle])),papDraw,spacing)
    # Smooth final image
    papImage = papImage.resize((result_pap_canvas_list[page].winfo_width(),result_pap_canvas_list[page].winfo_height()),resample=Image.ANTIALIAS)
    # Export final image
    with BytesIO() as imageBinary:
        papImage.save(imageBinary,'png',optimize=True,quality=90)
        imageBinary.seek(0)
        papImageFinal = ImageTk.PhotoImage(Image.open(imageBinary))
    result_pap_canvas_list[page].create_image(0,0,anchor='nw',image=papImageFinal)
    root.update_idletasks()

def draw_pap(word_pap,word_mora,word,page):
    global mora_offset
    global papImageFinal
    mora_offset = 0
    pap_list = []
    pap_list.clear()
    spacing = 80
    result_pap_canvas_list[page].delete('pap')
    result_hira_canvas_list[page].delete('all')
    result_pap_canvas_list[page].configure(width=spacing*int(word_mora)+120,bg=background)
    result_hira_canvas_list[page].configure(width=spacing*int(word_mora)+160,height=100,bg=background)
    root.update_idletasks()
    # Find the pitch pattern
    if int(word_pap) == 0:
        for mora_pap in range (0,int(word_mora)):
            if mora_pap == 0:
                pap_list.append('0')
            else:
                pap_list.append('1')
        pap_list.append('1') # This is the particle
    if int(word_pap) == 1:
        for mora_pap in range (0,int(word_mora)):
            if mora_pap == 0:
                pap_list.append('1')
            else:
                pap_list.append('0')
        pap_list.append('0') # This is the particle
    if int(word_pap) == 2:
        for mora_pap in range (0,int(word_mora)):
            if mora_pap == 1:
                pap_list.append('1')
            else:
                pap_list.append('0')
        pap_list.append('0') # This is the particle
    if int(word_pap) == 3:
        for mora_pap in range (0,int(word_mora)):
            if mora_pap == 1 or mora_pap == 2:
                pap_list.append('1')
            else:
                pap_list.append('0')
        pap_list.append('1') # This is the particle
    if int(word_pap) == 4:
        for mora_pap in range (0,int(word_mora)):
            if mora_pap == 1 or mora_pap == 2 or mora_pap == 3:
                pap_list.append('1')
            else:
                pap_list.append('0')
        pap_list.append('0') # This is the particle
    if int(word_pap) == 5:
        for mora_pap in range (0,int(word_mora)):
            if mora_pap == 1 or mora_pap == 2 or mora_pap == 3 or mora_pap == 4:
                pap_list.append('1')
            else:
                pap_list.append('0')
        pap_list.append('0') # This is the particle
    if int(word_pap) == 6:
        for mora_pap in range (0,int(word_mora)):
            if mora_pap == 1 or mora_pap == 2 or mora_pap == 3 or mora_pap == 4 or mora_pap == 5:
                pap_list.append('1')
            else:
                pap_list.append('0')
        pap_list.append('0') # This is the particle
    if int(word_pap) == 7:
        for mora_pap in range (0,int(word_mora)):
            if mora_pap == 1 or mora_pap == 2 or mora_pap == 3 or mora_pap == 4 or mora_pap == 5 or mora_pap == 6:
                pap_list.append('1')
            else:
                pap_list.append('0')
        pap_list.append('0') # This is the particle
    if int(word_pap) == 8:
        for mora_pap in range (0,int(word_mora)):
            if mora_pap == 0:
                pap_list.append('0')
            else:
                pap_list.append('1')
        pap_list.append('0') # This is the particle
    # Draw pitch accent patern
    papImage = Image.new('RGB',(result_pap_canvas_list[page].winfo_width()*4,result_pap_canvas_list[page].winfo_height()*4),color=background)
    papDraw = ImageDraw.Draw(papImage)
    startx = (((math.floor(result_pap_canvas_list[page].winfo_width()/2))-((spacing)*(int(word_mora)-1))/2))
    starty = result_pap_canvas_list[page].winfo_height()-(spacing/2)
    for mora_circle in range(0,int(word_mora)+1):
        if mora_circle < int(word_mora):
            if pap_list[mora_circle] == pap_list[mora_circle+1]:
                connecting_line(startx+(spacing*mora_circle),starty-(spacing*int(pap_list[mora_circle])),starty-(spacing*int(pap_list[mora_circle+1])),papDraw,spacing)
            elif int(pap_list[mora_circle]) < int(pap_list[mora_circle+1]):
                connecting_line(startx+(spacing*mora_circle),starty-(spacing*int(pap_list[mora_circle])),(result_pap_canvas_list[page].winfo_height()-(spacing*0.560))-(spacing*int(pap_list[mora_circle+1])),papDraw,spacing)
            else: 
                connecting_line(startx+(spacing*mora_circle),starty-(spacing*int(pap_list[mora_circle])),(result_pap_canvas_list[page].winfo_height()-(spacing*0.420))-(spacing*int(pap_list[mora_circle+1])),papDraw,spacing)
    for mora_circle in range(0,int(word_mora)+1):
        if mora_circle < int(word_mora):
            solid_circle(startx+(spacing*mora_circle),starty-(spacing*int(pap_list[mora_circle])),papDraw,spacing)
            draw_hira(word_hira_list[page-1],mora_circle,startx,spacing,page,word_mora)
        else:
            hallow_circle(startx+(spacing*mora_circle),starty-(spacing*int(pap_list[mora_circle])),papDraw,spacing)
    # Smooth final image
    papImage = papImage.resize((result_pap_canvas_list[page].winfo_width(),result_pap_canvas_list[page].winfo_height()),resample=Image.ANTIALIAS)
    # Export final image
    with BytesIO() as imageBinary:
        papImage.save(imageBinary,'JPEG',optimize=True,quality=100)
        imageBinary.seek(0)
        papImageFinal = ImageTk.PhotoImage(Image.open(imageBinary))
    result_pap_canvas_list[page].create_image(0,0,anchor='nw',image=papImageFinal)

def search_cmd(*a,newtab,target):
    global currentPage
    global page_list
    global page_count
    list_path = active_list + '.lst' 
    with h5.File(unipath.joinpath(words_l_dir,list_path),'r') as f:
        if target in f:
            word_hira = f[ target].attrs.get('hira')
            word_romaji = f[target].attrs.get('romaji')
            word_trans = f[target].attrs.get('translation')
            word_mora = f[target].attrs.get('mora')
            word_pap = f[target].attrs.get('pap')
            word_notes = f[target].attrs.get('notes')
            f.close()
    if currentPage == 0 or newtab == True:
        word_hira_list.insert(page_count+1,word_hira)
        word_romaji_list.insert(page_count+1,word_romaji)
        word_trans_list.insert(page_count+1,word_trans)
        word_mora_list.insert(page_count+1,word_mora)
        word_pap_list.insert(page_count+1,word_pap)
        word_notes_list.insert(page_count+1,word_notes)
        page_list.append(page_count+1)
        new_page = add_result_page(True,result_notebook,page_count+1,target,word_hira,word_romaji,word_trans,word_mora,word_pap,word_notes)
        currentPage = page_count+1
        page_count += 1
        result_notebook.select(new_page)
        resultCanvasList.insert(page_count+1,new_page)
    else:
        result_notebook.tab(currentPage,text=target)
        style.theme_settings(current_theme,{'TNotebook.Tab':{'configure':{'padding':[(result_canvas.winfo_width()-get_tab_length(False))/((page_count+1)*2), 0],'font':('Quattrocento Sans','10')}}})
        result_label_list[currentPage].change(text=target)
        result_romaji_label_list[currentPage].change(text=word_romaji)
        result_trans_label_list[currentPage].change(text=word_trans)
        result_notes_label_list[currentPage].configure(text=word_notes)
        # Update pap redraw lists
        del word_hira_list[currentPage-1]
        del word_romaji_list[currentPage-1]
        del word_trans_list[currentPage-1]
        del word_mora_list[currentPage-1]
        del word_pap_list[currentPage-1]
        del word_notes_list[currentPage-1]
        word_hira_list.insert(currentPage-1,word_hira)
        word_romaji_list.insert(currentPage-1,word_romaji)
        word_trans_list.insert(currentPage-1,word_trans)
        word_mora_list.insert(currentPage-1,word_mora)
        word_pap_list.insert(currentPage-1,word_pap)
        word_notes_list.insert(currentPage-1,word_notes)
        redraw_pap(currentPage)
        adjust_page_canvas()
def recount_words():
    global word_count
    global word_count_label_var
    global internal_word_list
    global internal_hira_list
    global internal_romaji_list
    global internal_trans_list
    global study_data
    list_path = active_list + '.lst'
    with h5.File(unipath.joinpath(words_l_dir,list_path),'r') as f:
        internal_word_list = list(f.keys())
        word_count = len(internal_word_list)
        for i in internal_word_list:
            internal_hira_list.append(f[i].attrs.get('hira'))
            internal_romaji_list.append(f[i].attrs.get('romaji'))
            internal_trans_list.append(f[i].attrs.get('translation'))
        f.close()
    word_count_label_var.set('Total words loaded: ' + str(word_count))
def populate_side_bar_list():
    global word_count
    global internal_word_list
    side_bar_list.delete(0,'end')
    sorted_internal_word_list = internal_word_list
    sorted_internal_word_list.sort()
    for i in range(word_count):
        side_bar_list.insert(i,sorted_internal_word_list[i])
def search_side_bar_list(*args):
    result_list = []
    search_term = side_bar_search_box.get()
    side_bar_list.delete(0,'end')
    for i in range(0,word_count):
        if search_term.lower() in internal_word_list[i].lower():
            result_list.insert(i,internal_word_list[i])
        elif search_term.lower() in internal_hira_list[i].lower():
            result_list.insert(i,internal_word_list[i])
        elif search_term.lower() in internal_romaji_list[i].lower():
            result_list.insert(i,internal_word_list[i])
        elif search_term.lower() in internal_trans_list[i].lower():
            result_list.insert(i,internal_word_list[i])
    result_list.sort()
    for i in range(0,len(result_list)):
        side_bar_list.insert('end',result_list[i])

search_var.trace('w',search_side_bar_list)

def grab_resize(event):
    mx = root.winfo_pointerx()
    my = root.winfo_pointery()
    rootx = root.winfo_rootx()
    rooty = root.winfo_rooty()
    root.geometry('%sx%s' % ((max(mx-rootx,0)),(max(my-rooty,0))))
    if mx-rootx <= 1000 or my-rooty <= 500:
        resize_results_canvas('')
def get_monitor(x,y):
    monitors = screeninfo.get_monitors()
    for i in reversed(monitors):
        if i.x <= x <= i.width + i.x and i.y <= y <= i.height + i.y:
            return i
    return monitors[0]
def start_move(event,target):
    global root_size
    if root_size == 'max':
        toggle_max()
    target.x = event.x
    target.y = event.y
def stop_move(event,target):
    target.x = None
    target.y = None
def move_window(event,target):
    global root_size
    if root_size == 'max' and target == root:
        root.geometry('1000x500')
        root_size = 'window'
        psuedo.state('normal')
    target.geometry('+'+str(event.x)+'+'+str(event.y))
    top_menu_canvas_max.button.configure(image=max_button_image)
    deltax = event.x - target.x
    deltay = event.y - target.y
    x = target.winfo_x() + deltax
    y = target.winfo_y() + deltay
    target.geometry(f"+{x}+{y}")
    if target == root:
        psuedo.geometry(f"+{x}+{y}")
def make_rgb(rgb):
    return "#%02x%02x%02x" % rgb
def hex_rgb(hex):
    hex = hex.lstrip('#')
    hlen = len(hex)
    return tuple(int(hex[i:i + hlen // 3], 16) for i in range(0, hlen, hlen // 3))
def difference_color(color):
    initial_color = hex_rgb(color)
    r,g,b = initial_color
    if (r*0.299 + g*0.587 + b*0.114) > 150:
        new_color = (r-25,g-25,b-25)
        return make_rgb(new_color)
    else:
        new_color = (r+25,g+25,b+25)
        return make_rgb(new_color)
def clamp(value,minum,maxum):
    return max(min(value,maxum),minum)
def resize_results_canvas(event):
    result_notebook.configure(width=result_canvas.winfo_width(),height=result_canvas.winfo_height()-22)
    if os.name == 'nt':
        top_menu_canvas.delete('lines')
        top_menu_canvas.create_line(0,30,root.winfo_width(),30,width=4,fill=top_menu_bg,tags='lines')
    style.theme_settings(current_theme,{'TNotebook.Tab':{'configure':{'padding':[(result_canvas.winfo_width()-get_tab_length(False))/((page_count+1)*2), 0],'font':('Quattrocento Sans','10')}}})
    # Move result items
    adjust_page_canvas(event)
def toggle_max():
    global root_size
    global root_last_xpos
    global root_last_ypos
    global window_mode_called
    if root_size == 'window':
        psuedo.state('zoomed')
        root.geometry('+'+str(psuedo.winfo_x()+8)+'+'+str(psuedo.winfo_y()+8))
        root.geometry('%dx%d' % (psuedo.winfo_width(),(psuedo.winfo_height()+23)))
        root_size = 'max'
        root_bot_right_corner.lower()
        top_menu_canvas_max.button.configure(image=window_button_image)
        thread1 = threading.Timer(0.02,adjust_page_canvas)
        thread1.start()
    else:
        root.geometry(('%dx%d+'+(str(math.floor(root_last_xpos)))+'+'+(str(math.floor(root_last_ypos)))) % (1000,500))
        window_mode_called = True
        root_size = 'window'
        psuedo.state('normal')
        root.geometry('+'+str(psuedo.winfo_x()+8)+'+'+str(psuedo.winfo_y()+8))
        top_menu_canvas_max.button.configure(image=max_button_image)
        root_bot_right_corner.lift()
        thread1 = threading.Timer(0.02,adjust_page_canvas)
        thread1.start()
def minimize():
    global window_mode_called
    window_mode_called = False
    psuedo.iconify()
    root.state('withdraw')
def draw_gradient(master,width,height,rgb1,rgb2,gradient_frame,gradient_canvas):
    gradient_canvas.delete('grad')
    line_total = math.floor(width/4)
    r_incre = math.floor((rgb1[0] - rgb2[0])/line_total)
    g_incre = math.floor((rgb1[1] - rgb2[1])/line_total)
    b_incre = math.floor((rgb1[2] - rgb2[2])/line_total)
    for i in range(1,line_total):
        new_rgb = (rgb1[0]-(r_incre*i),rgb1[1]-(g_incre*i),rgb1[2]-(b_incre*i))
        if new_rgb[0] > rgb2[0] and new_rgb[1] > rgb2[1] and new_rgb[2] > rgb2[2]:
            new_rgb = rgb2
        line_colour = make_rgb(new_rgb)
        gradient_canvas.create_line(i*2,0,i*2,height,width=4,fill=line_colour,tags='grad')
    gradient_canvas.pack()
    return gradient_frame, gradient_canvas
def create_gradient(master,width,height,rgb1,rgb2):
    gradient_frame = tk.Frame(master,width=width,height=height,bg=make_rgb(rgb2))
    gradient_canvas = tk.Canvas(gradient_frame,highlightthickness=0,width=width,height=height,bg=make_rgb(rgb2))
    grad = draw_gradient(master,width,height,rgb1,rgb2,gradient_frame,gradient_canvas)
    return grad[0], grad[1]
def draw_header_lines():
    root.update_idletasks()
    h = top_header_canvas.winfo_height()
    top_header_canvas.delete('lines')
    top_header_canvas.create_line(top_header_active_list_label.winfo_x()+top_header_active_list_label.winfo_width()+5,2,top_header_active_list_label.winfo_x()+top_header_active_list_label.winfo_width()+5,h-2,width=1,fill='gray',tags='lines')
def search_clear():
    side_bar_search_box.delete(start=0,finish='end')
def list_search(event):
    side_list = event.widget
    index = int(side_list.curselection()[0])
    word = side_list.get(index)
    side_bar_search_box.delete(start=0,finish='end')
    search_cmd(newtab=True,target=word)
    side_bar_search_box.delete(start=0,finish='end')
def search_box_list_search(*event):
    if side_bar_list.curselection()[0] != '':
        index = int(side_bar_list.curselection()[0])
        word = side_bar_list.get(index)
        if keyboard.is_pressed('shift'):
            search_cmd(newtab=True,target=word)
        else:
            search_cmd(newtab=False,target=word)
def side_list_double_click(event):
    side_list = event.widget
    index = int(side_list.curselection()[0])
    word = side_list.get(index)
    if keyboard.is_pressed('shift'):
        search_cmd(newtab=True,target=word)
    else:
        search_cmd(newtab=False,target=word)
def deselect_side_list(event):
    side_list = event.widget
    side_list.selection_clear(0,'end')
def side_bar_list_select(event):
    event.widget.selection_clear(0,'end')
    event.widget.selection_set(event.widget.nearest(event.y))
def right_click_tab(event):
    global page_count
    clicked_tab = result_notebook.tk.call(result_notebook._w,'identify','tab',event.x,event.y)
    if not clicked_tab == 0:
        result_notebook.forget(clicked_tab)
        del word_hira_list[clicked_tab-1]
        del word_romaji_list[clicked_tab-1]
        del word_trans_list[clicked_tab-1]
        del word_mora_list[clicked_tab-1]
        del word_pap_list[clicked_tab-1]
        del word_notes_list[clicked_tab-1]
        page_count -= 1
        adjust_page_canvas(event)
        style.theme_settings(current_theme,{'TNotebook.Tab':{'configure':{'padding':[(result_canvas.winfo_width()-get_tab_length(False))/((page_count+1)*2), 0],'font':('Quattrocento Sans','10')}}})
def get_tab_length(new,*word):
    total_width = 0
    tab_title_list = [result_notebook.tab(i,option='text') for i in result_notebook.tabs()]
    if new:
        tab_title_list.append(word)
        tab_title_list_length = len(tab_title_list)
    else:
        tab_title_list_length = len(tab_title_list)
    for i in range(tab_title_list_length):
        tmp_label = tk.Label(None,text=tab_title_list[i],font=('Quattrocento Sans','10'))
        total_width += tmp_label.winfo_reqwidth()
    return int(total_width)
def cancel_threads():
    if not thread1 == None: thread1.cancel()
def check_word_exists(word):
    with h5.File(unipath.joinpath(words_l_dir,active_list+'.lst'),'r') as f:
        if word in f:
            return 'exists'
        else:
            return 'free'
def write_word(word,hira,romaji,mora,pap,trans,notes):
    with h5.File(unipath.joinpath(words_l_dir,active_list+'.lst'),'a') as f:
        wordGrp = f.create_group(word)
        wordGrp.attrs['hira'] = hira
        wordGrp.attrs['romaji'] = romaji
        wordGrp.attrs['mora'] = mora
        wordGrp.attrs['pap'] = pap
        wordGrp.attrs['translation'] = trans
        wordGrp.attrs['notes'] = notes
        f.close()
    add_word_word_entry.delete(0,'end')
    add_word_hiragana_entry.delete(0,'end')
    add_word_romaji_entry.delete(0,'end')
    add_word_trans_entry.delete(0,'end')
    add_word_mora_entry.delete(0,'end')
    add_word_pap_var.set(0)
    add_word_notes_textbox.delete()
    recount_words()
    populate_side_bar_list()
def add_word_cmd():
    word = add_word_word_entry.get().replace('\n','').replace('\r','').replace('\t','')
    hira = add_word_hiragana_entry.get().replace('\n','').replace('\r','').replace('\t','')
    romaji = add_word_romaji_entry.get().replace('\n','').replace('\r','').replace('\t','')
    trans = add_word_trans_entry.get().replace('\n','').replace('\r','').replace('\t','')
    mora = add_word_mora_entry.get().replace('\n','').replace('\r','').replace('\t','')
    pap = str(add_word_pap_var.get())
    notes = add_word_notes_textbox.get()
    if word == '' or hira == '':
        tkMessageBox.showinfo(title='Add word error',message='You must enter at least the word and its hiragana to add it.')
    else:
        if mora == '':
            mora = str(len(hira))
        if len(hira.replace(' ','')) == int(mora):
            if check_word_exists(word) == 'free':
                if word == '':
                    tkMessageBox.showinfo(title='Add word error',message='You must fill out at least the word entry box!')
                    return
                elif romaji == '' or trans == '' or mora == '' or pap == '':
                    if tkMessageBox.askquestion(title='Empty fields',message='Some fields are empty! \nDo you still want to add this word?') == 'yes':
                        write_word(word,hira,romaji,mora,pap,trans,notes)
                    else:
                        return
                else:
                    write_word(word,hira,romaji,mora,pap,trans,notes)
            else:
                tkMessageBox.showinfo(title='Add word error',message=str(word)+' already exists!')
        else:
            if tkMessageBox.askquestion(title='Mora count mismatch',message='Your mora count might not match the hiragana you entered! \nDo you still want to add this word?') == 'yes':
                if check_word_exists(word) == 'free':
                    if word == '':
                        tkMessageBox.showinfo(title='Add word error',message='You must fill out at least the word entry box!')
                        return
                    elif romaji == '' or trans == '' or mora == '' or pap == '':
                        if tkMessageBox.askquestion(title='Empty fields',message='Some fields are empty! \nDo you still want to add this word?'):
                            write_word(word,hira,romaji,mora,pap,trans,notes)
                        else:
                            return
                    else:
                        write_word(word,hira,romaji,mora,pap,trans,notes)
                else:
                    tkMessageBox.showinfo(title='Add word error',message=str(word)+' already exists!')
            else:
                return
def close_windows():
    global settings
    global settings_psuedo
    if not settings == None:
        settings.destroy()
    if not settings_psuedo == None:
        settings_psuedo.destroy()
    psuedo.destroy()
def close_settings():
    global settings
    global settings_psuedo
    settings.destroy()
    settings = None
    settings_psuedo.destroy()
    settings_psuedo = None
def reset_settings_page():
    global settings
    global settings_psuedo
    settings.destroy()
    if os.name == 'nt':
        settings_psuedo.destroy()
    settings = None
    settings_psuedo = None
def show_settings(event):
        settings.deiconify()
def update_widgets():
    global background
    global title_bg
    global title_fg
    global header_bg
    global top_menu_bg
    global side_bar_bg
    global text_bg
    global text_fg
    global result_fg
    global pap_fg
    global highlight_bg
    global settings_bg
    global tab_bg
    global tab_fg
    global button_bg
    global exit_button_image
    global max_button_image
    global mini_button_image
    global settings_button_image
    global search_button_image
    global search_bar_image
    global style
    global settingsFileConvertButton
    # Update psuedo windows/Windows specific
    if os.name == 'nt':
        settings_psuedo.configure(bg=background)
        settings_top_menu.configure(bg=top_menu_bg)
        settings_top_menu_title.change(bg=top_menu_bg,fg=text_fg)
        settings_top_menu_close_button.change(bg=top_menu_bg,image=exit_button_image,activebackground=top_menu_bg)
        # Update top menu
        top_menu_canvas.configure(bg=top_menu_bg)
        top_menu_canvas_title.change(bg=top_menu_bg,fg=text_fg)
        top_menu_canvas_close.change(bg=top_menu_bg,activebackground=top_menu_bg,image=exit_button_image)
        top_menu_canvas_max.change(bg=top_menu_bg,activebackground=top_menu_bg,image=max_button_image)
        top_menu_canvas_mini.change(bg=top_menu_bg,activebackground=top_menu_bg,image=mini_button_image)
    root.configure(bg=background)
    # Update settings window
    settings_canvas.configure(bg=background)
    settings_frame.configure(bg=half_color(background))
    settings_theme_label.change(bg=text_bg,fg=text_fg)
    settings_theme_label.change_frame(bg=text_bg)
    # General settings
    settings_general_label.change(bg=text_bg,fg=text_fg)
    settings_general_label.change_frame(bg=text_bg)
    settings_romaji_checkbox.configure(bg=background,fg=text_fg,activebackground=background,activeforeground=text_fg,highlightbackground=text_bg,selectcolor=background)
    # File settings
    settings_file_label.change(bg=text_bg,fg=text_fg)
    settings_file_label.change_frame(bg=text_bg)
    settings_file_open_button.configure(bg=background,fg=text_fg,activebackground=background,activeforeground=text_fg,highlightbackground=text_bg)
    settings_file_import_button.configure(bg=background,fg=text_fg,activebackground=background,activeforeground=text_fg,highlightbackground=text_bg)
    settingsFileConvertButton.configure(bg=background,fg=text_fg,activebackground=background,activeforeground=text_fg,highlightbackground=text_bg)
    # Theme settings
    settings_theme_entry.configure(bg=background,fg=text_fg,activebackground=background,activeforeground=text_fg,highlightbackground=text_bg)
    settings_theme_entry['menu'].configure(bg=background,fg=text_fg,activebackground=highlight_bg)
    settings_apply_button.configure(bg=background,fg=text_fg,activebackground=background,activeforeground=highlight_bg)
    # Update master list
    settings_master_update_label.change(bg=text_bg,fg=text_fg)
    settings_master_update_label.change_frame(bg=text_bg)
    settings_master_update_info.configure(bg=background,fg=text_fg)
    settings_master_update_button.configure(bg=background,fg=text_fg,activebackground=background,activeforeground=text_fg,highlightbackground=text_bg)
    style.configure('custom.Horizontal.TProgressbar',foregroud=highlight_bg,background=text_bg)
    settings_master_update_progress.configure(style='custom.Horizontal.TProgressbar')
    # Update Pitchi title
    pitchi_title_canvas.configure(bg=title_bg)
    pitchi_title_frame.configure(bg=title_bg)
    pitchi_title_logo.configure(bg=title_bg)
    pitchi_title_label.configure(bg=title_bg,fg=text_fg)
    settings_button.change(bg=title_bg,image=settings_button_image)
    # Update top header
    top_header_canvas.configure(bg=header_bg)
    top_header_active_list_label.change(bg=header_bg,fg=text_fg)
    top_header_word_count_label.change(bg=header_bg,fg=text_fg)
    add_word_button.change(bg=header_bg,fg=text_fg,activebackground=header_bg)
    # Update side bar
    side_bar_canvas.configure(bg=side_bar_bg)
    side_bar_search_bar.configure(bg=side_bar_bg,image=search_bar_image)
    side_bar_search_box.change(bg=side_bar_bg,fg=text_fg)
    side_bar_search_button.change(bg=side_bar_bg,image=search_button_image)
    side_bar_canvas.delete('lines')
    side_bar_canvas.create_line(0,50,380,50,width=2,fill=top_menu_bg,tags='lines')
    # Update side bar list
    side_bar_list_canvas.configure(bg=side_bar_bg)
    side_bar_list.configure(bg=side_bar_bg,fg=text_fg,selectbackground=highlight_bg)
    # Update welcome page
    welcomeFrame.configure(bg=background)
    welcomeSubframe.configure(bg=background)
    welcome_title.configure(bg=background,fg=text_fg)
    welcome_subtitle.configure(bg=background,fg=text_fg)
    welcome_heading1.configure(bg=background,fg=text_fg)
    welcome_paragraph1.configure(bg=background,fg=text_fg)
    welcome_heading2.configure(bg=background,fg=text_fg)
    welcome_paragraph2.configure(bg=background,fg=text_fg)
    # Update result notebook
    result_canvas.configure(bg=background)
    style.configure('TNotebook',background=tab_bg,borderwidth=0,relief='flat')
    style.configure('TNotebook.Tab',background=tab_bg,foreground=tab_fg)
    if not currentPage == 0:
        subframe_list[currentPage].configure(bg=background)
        resultCanvasList[currentPage].configure(bg=background)
        resultContainerList[currentPage].configure(bg=background)
        
    # Update add word pane
    add_word_canvas.configure(bg=side_bar_bg)
    add_word_header.change(bg=title_bg,fg=text_fg)
    add_word_word_label.change(bg=side_bar_bg,fg=text_fg)
    add_word_word_entry.change(bg=text_bg,fg=text_fg)
    add_word_hiragana_label.change(bg=side_bar_bg,fg=text_fg)
    add_word_hiragana_entry.change(bg=text_bg,fg=text_fg)
    add_word_romaji_label.change(bg=side_bar_bg,fg=text_fg)
    add_word_romaji_entry.change(bg=text_bg,fg=text_fg)
    add_word_trans_label.change(bg=side_bar_bg,fg=text_fg)
    add_word_trans_entry.change(bg=text_bg,fg=text_fg)
    add_word_mora_label.change(bg=side_bar_bg,fg=text_fg)
    add_word_mora_entry.change(bg=text_bg,fg=text_fg)
    add_word_pap_label.change(bg=side_bar_bg,fg=text_fg)
    add_word_pap_entry.configure(fg=text_fg,bg=text_bg,activebackground=text_bg,activeforeground=text_fg)
    add_word_pap_entry['menu'].configure(bg=text_bg,fg=text_fg,activebackground=highlight_bg)
    add_word_notes_label.change(bg=side_bar_bg,fg=text_fg)
    add_word_notes_textbox.configure(bg=text_bg,fg=text_fg)
    add_word_add_button.change(bg=side_bar_bg,fg=text_fg,activebackground=highlight_bg)
def settings_apply(theme):
    global active_theme
    global settings_dir
    active_theme = theme.get()
    load_theme()
    settings_info = configparser.ConfigParser()
    settings_info.read(settings_dir,encoding='utf-8')
    settings_info.set('Settings','theme',active_theme)
    settings_file = open(settings_dir,'w',encoding='utf-8')
    settings_info.write(settings_file)
    settings_file.close()
    update_widgets()
def half_color(color):
    color_rgb = hex_rgb(color)
    if color_rgb[0] > 128:
        r = round(int(color_rgb[0]/2))
    else:
        r = round(int(color_rgb[0])+(255-int(color_rgb[0]))/2)
    if color_rgb[0] > 128:
        g = round(int(color_rgb[1]/2))
    else:
        g = round(int(color_rgb[1])+(255-int(color_rgb[1]))/2)
    if color_rgb[0] > 128:
        b = round(int(color_rgb[2]/2))
    else:
        b = round(int(color_rgb[2])+(255-int(color_rgb[2]))/2)
    new_rgb = (r,g,b)
    return make_rgb((new_rgb))
def update_romaji():
    global show_romaji
    settings_info = configparser.ConfigParser()
    settings_info.read(settings_dir,encoding='utf-8')
    if show_romaji == 'true':
        settings_info.set('Settings','romaji','true')
    elif show_romaji == 'false':
        settings_info.set('Settings','romaji','false')
    settings_file = open(settings_dir,'w',encoding='utf-8')
    settings_info.write(settings_file)
    settings_file.close()
    for i in range(1,page_count+1):
        if show_romaji == 'false':
            result_romaji_label_list[i].grid_forget()
            thread1 = threading.Timer(0.02,adjust_page_canvas)
            thread1.start()
        else:
            result_romaji_label_list[i].grid(row=1,column=0)
            thread1 = threading.Timer(0.02,adjust_page_canvas)
            thread1.start()
def toggle_romaji():
    global show_romaji
    if show_romaji == 'false':
        show_romaji = 'true'
        update_romaji()
    else:
        show_romaji = 'false'
        update_romaji()
def settings_page():
    global settings
    global settings_frame
    global settings_psuedo
    global settings_top_menu
    global settings_top_menu_title
    global settings_canvas
    global settings_general_label
    global show_romaji
    global settings_general_label
    global settings_romaji_checkbox
    global settings_file_label
    global settings_file_open_button
    global settings_file_import_button
    global settingsFileConvertButton
    global settings_theme_label
    global settings_theme_entry
    global settings_apply_button
    global settings_master_update_label
    global settings_master_update_info
    global settings_master_update_button
    global settings_master_update_progress
    global settings_top_menu_close_button
    global dl_progress
    dummy = ''
    half_color(background)
    if settings == None:
        if os.name == 'nt':
            settings_psuedo = tk.Tk()
            settings_psuedo.configure(bg=background)
            settings_psuedo.attributes('-alpha',0.0)
            settings_psuedo.title('Pitchi Settings')
            settings_psuedo.geometry('400x400')
            settings_psuedo.iconbitmap(unipath.joinpath(data_dir,'icon.ico'))
            settings_psuedo.bind('<FocusIn>',show_settings)
            settings_psuedo.protocol('WM_DELETE_WINDOW',lambda:reset_settings_page())
            settings = tk.Toplevel()
            settings.overrideredirect(True)
        if os.name == 'posix':
            settings = tk.Tk()
        settings.focus()
        settings.title('Settings')
        settings.protocol('WM_DELETE_WINDOW',lambda:reset_settings_page())
        settings.configure(bg=background)
        settings.resizable(0,0)
        window_width = 400
        window_height = 500
        screen_width = root.winfo_screenwidth()
        screen_height = root.winfo_screenheight()
        x_cord = (screen_width/2) - (window_width/2)
        y_cord = (screen_height/2) - (window_height/2)
        settings.geometry('%dx%d+%d+%d' % (window_width,window_height,x_cord,y_cord))
        settings.grid_propagate(False)
        settings_frame = tk.Frame(settings,bg=half_color(background),borderwidth=1,height=window_height,width=window_width)
        settings_frame.rowconfigure(1,weight=1)
        settings_frame.grid(row=0,column=0,sticky='nsew')
        settings_frame.grid_propagate(False)
        if os.name == 'nt':
            settings_top_menu = tk.Canvas(settings_frame,bg=top_menu_bg,highlightthickness=0,width=window_width-2,height=30)
            settings_top_menu_title = static_label(settings_top_menu,bg=top_menu_bg,fg=text_fg,font=('Quattrocento Sans',10),text='Settings',anchor='c',pady=3)
            settings_top_menu_close_button = static_button(settings_top_menu,bg=top_menu_bg,activebackground=top_menu_bg,width=40,height=30,borderwidth=0,image=exit_button_image,command=lambda:close_settings(),anchor='c')
            settings_top_menu_close_button.bind('<Enter>',lambda event:highlight_button(event,top_menu_bg))
            settings_top_menu_close_button.bind('<Leave>',return_normal_button)
            settings_top_menu.pack_propagate(False)
            settings_top_menu_title.pack(side='left',padx=10)
            settings_top_menu_close_button.pack(side='right')
            settings_canvas = tk.Canvas(settings_frame,bg=background,highlightthickness=0,width=window_width-2)
        elif os.name == 'posix':
            settings_canvas = tk.Canvas(settings_frame,bg=background,highlightthickness=0,height=400,width=window_width-2)
        settings_canvas.grid_propagate(False)
        # General settings
        settings_general_label = static_label(settings_canvas,bg=text_bg,fg=text_fg,text='General',font=('Quattrocento Sans',13),anchor='w')
        settings_general_label.change_frame(bg=text_bg)
        settings_general_label.change(width=10)
        settings_romaji_checkbox = tk.Checkbutton(settings_canvas,selectcolor=background,bg=background,fg=text_fg,activebackground=background,activeforeground=text_fg,highlightbackground=text_bg,relief='flat',borderwidth=0,text='Show romaji',font=('Quattrocento Sans',12),variable=dummy,onvalue='True',offvalue='False',padx=20,command=toggle_romaji)
        if show_romaji == 'true':
            settings_romaji_checkbox.select()
        # File settings
        settings_file_label = static_label(settings_canvas,bg=text_bg,fg=text_fg,text='File',font=('Quattrocento Sans',13),anchor='w')
        settings_file_label.change_frame(bg=text_bg)
        settings_file_label.change(width=10)
        settings_file_open_button = tk.Button(settings_canvas,bg=background,fg=text_fg,text='Open...',font=('Quattrocento Sans',12),relief='raised',borderwidth=1,activebackgroun=background,activeforeground=highlight_bg,anchor='c',command=open_list)
        settings_file_import_button = tk.Button(settings_canvas,bg=background,fg=text_fg,text='Import...',font=('Quattrocento Sans',12),relief='raised',borderwidth=1,activebackgroun=background,activeforeground=highlight_bg,anchor='c',command=import_list)
        settingsFileConvertButton = tk.Button(settings_canvas,bg=background,fg=text_fg,text='Convert...',font=('Quattrocento Sans',12),relief='raised',borderwidth=1,activebackgroun=background,activeforeground=highlight_bg,anchor='c',command=convertList)
        # Theme settings
        settings_theme_label = static_label(settings_canvas,bg=text_bg,fg=text_fg,text='Theme',font=('Quattrocento Sans',13),anchor='w')
        settings_theme_label.change_frame(bg=text_bg)
        settings_theme_label.change(width=10)

        settings_theme_var = tk.StringVar(settings_canvas)
        settings_theme_var.set(active_theme)

        settings_theme_entry = tk.OptionMenu(settings_canvas,settings_theme_var,*(find_themes()))
        settings_theme_entry.configure(relief='flat',height=1,bg=background,fg=text_fg,width=15,highlightthickness=2,highlightbackground=text_bg,font=('Quattrocento Sans',12),activebackground=background,activeforeground=text_fg)
        settings_theme_entry['menu'].configure(bg=background,fg=text_fg,borderwidth=0,activebackground=highlight_bg,font=('Quattrocento Sans',10))

        settings_apply_button = tk.Button(settings_canvas,text='Apply',font=('Quattrocento Sans',12),bg=background,fg=text_fg,command=lambda theme=settings_theme_var:settings_apply(theme),relief='flat',borderwidth=0,activebackgroun=background,activeforeground=highlight_bg,anchor='c')
        # Update master list
        settings_master_update_label = static_label(settings_canvas,bg=text_bg,fg=text_fg,text='Update Master List',font=('Quattrocento Sans',13),anchor='w')
        settings_master_update_label.change_frame(bg=text_bg)
        settings_master_update_label.change(width=100)
        settings_master_update_info = tk.Message(settings_canvas,bg=background,fg=text_fg,text='Warning! This will replace your master list with the current version from GitHub. Back up your current master list file before updating.',font=('Quattrocento Sans',9),anchor='w',justify='left',width=380)
        settings_master_update_button = tk.Button(settings_canvas,bg=background,fg=text_fg,text='Update Master.lst',font=('Quattrocento Sans',12),relief='flat',borderwidth=0,activebackgroun=background,activeforeground=highlight_bg,anchor='c',command=download_master)
        settings_master_update_progress = ttk.Progressbar(settings_canvas,orient='horizontal',length=200,mode='determinate')

        if os.name == 'nt':
            settings_top_menu.grid(row=0,column=0,sticky='nsew')
            settings_canvas.grid(row=1,column=0,sticky='nsew')
        elif os.name == 'posix':
            settings_canvas.grid(row=0,column=0,sticky='nsew')

        settings_canvas.columnconfigure(0,weight=1)
        settings_canvas.columnconfigure(1,weight=1)
        settings_canvas.columnconfigure(2,weight=1)

        settings_general_label.grid(row=0,column=0,columnspan=3,sticky='nsew',pady=10,padx=10)
        settings_romaji_checkbox.grid(row=1,column=0,pady=0,padx=20)
        settings_file_label.grid(row=2,column=0,columnspan=3,sticky='nsew',pady=10,padx=10)
        settings_file_open_button.grid(row=3,column=0,sticky='nsew',pady=5,padx=20)
        settings_file_import_button.grid(row=3,column=1,sticky='nsew',pady=5,padx=20)
        settingsFileConvertButton.grid(row=4,column=0,sticky='nsew',pady=5,padx=20)
        settings_theme_label.grid(row=5,column=0,columnspan=3,sticky='nsew',pady=10,padx=10)
        settings_theme_entry.grid(row=6,column=0,columnspan=2,sticky='nsew',pady=5,padx=20)
        settings_apply_button.grid(row=6,column=2,sticky='nsew',padx=20)
        settings_master_update_label.grid(row=7,column=0,columnspan=3,sticky='nsew',pady=10,padx=10)
        settings_master_update_info.grid(row=8,column=0,columnspan=3,sticky='nsew',padx=10)
        settings_master_update_button.grid(row=9,column=0,columnspan=3,sticky='nsew',pady=10,padx=20)
        settings_master_update_progress.grid(row=10,column=0,columnspan=3,sticky='nsew',padx=50)
        
        if os.name == 'nt':
            settings_top_menu.bind('<ButtonPress-1>',lambda event:start_move(event,settings))
            settings_top_menu.bind('<ButtonRelease-1>',lambda event:stop_move(event,settings))
            settings_top_menu.bind('<B1-Motion>',lambda event:move_window(event,settings))
            settings_top_menu_title.bind('<ButtonPress-1>',lambda event:start_move(event,settings))
            settings_top_menu_title.bind('<ButtonRelease-1>',lambda event:stop_move(event,settings))
            settings_top_menu_title.bind('<B1-Motion>',lambda event:move_window(event,settings))
    else:
        settings.focus()
def find_themes():
    tmp_lst = [x for x in os.listdir(themes_dir)]
    return [theme_name for theme_name in tmp_lst]
def update_progress_bar(current,total,width):
    settings_master_update_progress.step((current/total)*99)
def download_master():
    global active_list
    confirm = tk.messagebox.askyesno('Download New Master.lst','You are about to replace your master list with the one on the Pitchi GitHub! Make a backup of your current master list before downloading to avoid entry loss!\n\nAre you sure you want to contiue?',icon='warning')
    if confirm == True:
        os.remove(unipath.joinpath(words_l_dir,'master.lst'))
        settings.lift()
        wget.download('https://raw.githubusercontent.com/ChoerrySoul/Pitchi/master/word_lists/master.lst',os.path.abspath(unipath.joinpath(words_l_dir,'master.lst')),bar=update_progress_bar)
        tk.messagebox.showinfo('Download New Master.lst','Your local master list has been replaced!',icon='info')
        settings.lift()
        settings_master_update_progress.configure(value=0)
        if active_list == 'master':
            recount_words()
            populate_side_bar_list()
            word_count_label_var.set('Total words loaded: '+str(word_count))
def open_list():
    global active_list
    compat_files = [('Pitchi List','*.lst')]
    o_list = askopenfilename(initialdir=words_l_dir,filetypes=compat_files)
    if not o_list == '':
        al = os.path.basename(o_list).replace('.lst','')
        active_list_label_var.set('Current list: '+al.title())
        active_list = al
        recount_words()
        populate_side_bar_list()
        word_count_label_var.set('Total words loaded: '+str(word_count))
        draw_header_lines()
        close_settings()
    else:
        settings.lift()
def import_list():
    global active_list
    list_path = unipath.joinpath(words_l_dir,active_list+'.lst')
    duplicate_count = 0
    compat_files = [('Pitchi List','*.lst')]
    imported_list = askopenfilename(initialdir=words_l_dir,filetypes=compat_files)
    if not imported_list == '':
        # Open list to be imported
        with h5.File(imported_list,'r+') as f:
            imported_list_words = list(f.keys())
            f.close()
        # Open current list
        with h5.File(list_path,'r+') as f:
            current_list_words = list(f.keys())
            # Remove duplicate entries
            for i in current_list_words:
                try:
                    imported_list_words.remove(i)
                    duplicate_count += 1
                except ValueError:
                    pass
            f.close()
        # Add new entries into current list
        j = 0
        # Open current list
        with h5.File(list_path,'a') as f:
            # Open imported list
            with h5.File(imported_list,'r') as g:
                # Add imported words
                for i in imported_list_words:
                    wordGrp = f.create_group(i)
                    wordGrp.attrs['hira'] = g[i].attrs.get('hira')
                    wordGrp.attrs['mora'] = g[i].attrs.get('mora')
                    wordGrp.attrs['pap'] = g[i].attrs.get('pap')
                    wordGrp.attrs['romaji'] = g[i].attrs.get('romaji')
                    wordGrp.attrs['translation'] = g[i].attrs.get('translation')
                    wordGrp.attrs['notes'] = g[i].attrs.get('notes')
                    j += 1
                g.close()
            f.close()
        # Show Success
        tkMessageBox.showinfo('List imported!',message='List imported succesfully! \nWords added: ' + str(j) + '\nWords already present: '+ str(duplicate_count))
        recount_words()
        populate_side_bar_list()
        word_count_label_var.set('Total words loaded: '+str(word_count))
        draw_header_lines()
        close_settings()
    else:
        settings.lift()
def convertList():
    global active_list
    activeListPath = unipath.joinpath(words_l_dir,active_list+'.lst')
    compat_files = [('Pitchi List','*.lst')]
    lstPath = askopenfilename(initialdir=words_l_dir,filetypes=compat_files)
    originalName = (unipath(lstPath).stem)
    if not originalName == '':
        oldListInfo = configparser.ConfigParser()
        try:
            oldListInfo.read(unipath.joinpath(words_l_dir,originalName + '.lst'),encoding='utf-8')
        except UnicodeDecodeError:
            tkMessageBox.showerror('Error',message='Conversation failed!\nThe provided list is invalid. Outdated lists are in the INI format. This list may have already been converted or is corrupted.')
            settings.lift()
            return
        # Open and read old list
        os.rename(lstPath,unipath.joinpath(words_l_dir,originalName + '-OUTDATED.lst'))
        # Create new list
        j = 0
        with h5.File(lstPath,'w') as f:
            for i in oldListInfo.sections():
                j += 1
                wordGrp = f.create_group(i)
                wordGrp.attrs['hira'] = oldListInfo.get(i,'hira')
                wordGrp.attrs['romaji'] = oldListInfo.get(i,'romaji')
                wordGrp.attrs['mora'] = oldListInfo.get(i,'mora')
                wordGrp.attrs['pap'] = oldListInfo.get(i,'pap')
                wordGrp.attrs['translation'] = oldListInfo.get(i,'translation')
                wordGrp.attrs['notes'] = oldListInfo.get(i,'notes')
            f.close()
        tkMessageBox.showinfo('List converted!',message='List converted succesfully! \nTotal words: ' + str(j))
        # Ask to import converted list
        askImport = tkMessageBox.askquestion('Import Converted List',message='Would you like to import the converted list into your active list?\n\nActive list: ' + active_list)
        if askImport == 'yes':
            duplicate_count = 0
            # Open list to be imported
            with h5.File(lstPath,'r') as f:
                imported_list_words = list(f.keys())
                f.close()
            # Open current list
            with h5.File(activeListPath,'r') as f:
                current_list_words = list(f.keys())
                # Remove duplicate entries
                for i in current_list_words:
                    try:
                        imported_list_words.remove(i)
                        duplicate_count += 1
                    except ValueError:
                        pass
                f.close()
            # Add new entries into current list
            j = 0
            # Open current list
            with h5.File(activeListPath,'a') as f:
                # Open imported list
                with h5.File(lstPath,'r') as g:
                    # Add imported words
                    for i in imported_list_words:
                        wordGrp = f.create_group(i)
                        wordGrp.attrs['hira'] = g[i].attrs.get('hira')
                        wordGrp.attrs['mora'] = g[i].attrs.get('mora')
                        wordGrp.attrs['pap'] = g[i].attrs.get('pap')
                        wordGrp.attrs['romaji'] = g[i].attrs.get('romaji')
                        wordGrp.attrs['translation'] = g[i].attrs.get('translation')
                        wordGrp.attrs['notes'] = g[i].attrs.get('notes')
                        j += 1
                    g.close()
                f.close()
            # Show Success
            tkMessageBox.showinfo('List imported!',message='List imported succesfully! \nWords added: ' + str(j) + '\nWords already present: '+ str(duplicate_count))
            active_list = originalName
            recount_words()
            populate_side_bar_list()
            word_count_label_var.set('Total words loaded: '+str(word_count))
            draw_header_lines()
        askDelete = tkMessageBox.askquestion('Delete Outdated List',message='Would you like to delete the old list file?')
        if askDelete == 'yes':
            os.remove(unipath.joinpath(words_l_dir,originalName + '-OUTDATED.lst'))
        close_settings()
    else:
        settings.lift()
def allow_result_scroll(*event):
    global result_scroll
    result_scroll = True
def deny_result_scroll(*event):
    global result_scroll
    result_scroll = False
def listbox_arrow_select(event):
    if side_bar_list.curselection():
        pass
    else:
        side_bar_list.selection_set(0)
        return
    if event.keysym == 'Up' and side_bar_list.curselection()[0] == 0:
        side_bar_list.selection_clear(0)
        return
    selection = side_bar_list.curselection()[0]
    if event.keysym == 'Up':
        selection -= 1
    if event.keysym == 'Down':
        selection += 1
    if 0 <= selection < side_bar_list.size():
        side_bar_list.selection_clear(0,'end')
        side_bar_list.select_set(selection)
        side_bar_list.see(selection)
# Classes
class static_entry(tk.Frame):
    def __init__(self,master=None,**kwargs):
        tk.Frame.__init__(self,master)
        self.rowconfigure(0,minsize=kwargs.pop('height',None))
        self.columnconfigure(0,minsize=kwargs.pop('width',None))
        self.entry = tk.Entry(self,**kwargs)
        self.entry.configure(width=1)
        self.entry.grid(row=0,column=0,stick='nsew')
        self.config = self.entry.config
    def bind(self,event,command):
        self.entry.bind(event,command)
    def bind_enter(self):
        self.entry.bind('<Return>',search_box_list_search)
    def change(self,**kwargs):
        self.entry.configure(**kwargs)
    def delete(self,start,finish):
        self.entry.delete(start,finish)
    def insert(self,start,text):
        self.entry.insert(start,text)
    def get(self):
        return self.entry.get()
def highlight_button(event,color):
    global return_button_color
    return_button_color = color
    try:
        settings_top_menu_close_button
    except NameError:
        pass
    else:
        if str(event.widget) == str(settings_top_menu_close_button)+'.!button':
            event.widget.configure(bg=highlight_bg)
            return
    if str(event.widget) == str(top_menu_canvas_close)+'.!button':
        event.widget.configure(bg=highlight_bg)
        return
    else:
        if str(event.widget) == str(add_word_button)+'.!button' or str(event.widget) == str(add_word_add_button)+'.!button':
            event.widget.configure(fg=highlight_bg)
            return
        else:
            event.widget.configure(bg=difference_color(color))
            return
def return_normal_button(event):
    global return_button_color
    if str(event.widget) == str(add_word_button)+'.!button' or str(event.widget) == str(add_word_add_button)+'.!button':
        event.widget.configure(fg=text_fg)
    else:
        event.widget.configure(bg=return_button_color)
def grid_pitchi():
    root.grid_columnconfigure(0)
    root.grid_columnconfigure(1,weight=1)
    root.grid_columnconfigure(2)
    root.grid_rowconfigure(0)
    root.grid_rowconfigure(1)
    root.grid_rowconfigure(2)
    root.grid_rowconfigure(3)
    root.grid_rowconfigure(4,weight=1,minsize=0)
    if os.name == 'nt':
        top_menu_canvas.grid(row=0,column=0,columnspan=3,sticky='nsew')
    pitchi_title_canvas.grid(row=1,column=0,rowspan=2,sticky='nsew')
    top_header_canvas.grid(row=1,column=1,sticky='nsew')
    result_canvas.grid(row=2,column=1,rowspan=3,sticky='nsew')
    side_bar_canvas.grid(row=3,column=0,rowspan=1,sticky='nsew')
    side_bar_list_canvas.grid(row=4,column=0,sticky='nsew')
    add_word_canvas.grid(row=1,column=2,rowspan=4,sticky='ns')
def grid_forget_pitchi():
    top_header_canvas.grid_forget()
    result_canvas.grid_forget()
    side_bar_canvas.grid_forget()
    side_bar_list_canvas.grid_forget()
    add_word_canvas.grid_forget()
def grid_chosa():
    pass
def switch_mode(event):
    global study_mode
    if study_mode == False:
        pitchi_title_logo.configure(image=study_logo_image)
        title_label_var.set('Chosa')
        study_mode = True
        grid_forget_pitchi()
    else:
        pitchi_title_logo.configure(image=logo_image)
        title_label_var.set('Pitchi')
        study_mode = False
        grid_pitchi()
class static_label(tk.Frame):
    def __init__(self,master=None,**kwargs):
        tk.Frame.__init__(self,master)
        self.rowconfigure(0,minsize=kwargs.pop('height',None))
        self.columnconfigure(0,minsize=kwargs.pop('height',None))
        self.label = tk.Label(self,**kwargs)
        self.label.grid(row=0,column=0,stick='nsew')
        self.config = self.label.config
    def change_frame(self,**kwargs):
        self.configure(**kwargs)
    def size(self,**kwargs):
        self.configure(**kwargs)
    def change(self,**kwargs):
        self.label.configure(**kwargs)
    def bind(self,event,command):
        self.label.bind(event,command)
class static_textbox(tk.Frame):
    def __init__(self,master=None,**kwargs):
        tk.Frame.__init__(self,master)
        self.rowconfigure(0,minsize=kwargs.pop('height',None))
        self.columnconfigure(0,minsize=kwargs.pop('width',None))
        self.text = tk.Text(self,**kwargs)
        self.text.configure(width=1,height=1)
        self.text.grid(row=0,column=0,stick='nsew')
        self.config = self.text.config
    def get(self):
        return self.text.get('1.0','end')
    def change(self,**kwargs):
        self.rowconfigure(**kwargs)
    def configure(self,**kwargs):
        self.text.configure(**kwargs)
    def height(self):
        return self.winfo_height()
    def delete(self):
        self.text.delete('1.0','end')
class static_button(tk.Frame):
    def __init__(self,master=None,**kwargs):
        tk.Frame.__init__(self,master)
        self.rowconfigure(0,minsize=kwargs.pop('height',None))
        self.columnconfigure(0,minsize=kwargs.pop('width',None))
        self.button = tk.Button(self,**kwargs)
        self.button.grid(row=0,column=0,stick='nsew')
        self.config = self.button.config
    def bind_search(self):
        self.button.bind('<Shift-Button-1>',lambda e: [search_cmd(newtab=False,target=side_bar_search_box.get()),side_bar_search_button.focus_set])
        self.button.bind('<Button-1>',lambda e: [search_cmd(newtab=False,target=side_bar_search_box.get()),side_bar_search_button.focus_set])
    def bind(self,event,command):
        self.button.bind(event,command)
    def change(self,**kwargs):
        self.button.configure(**kwargs)
class static_list(tk.Frame):
    def __init__(self,master=None,**kwargs):
        global side_bar_list_global
        tk.Frame.__init__(self,master)
        self.rowconfigure(0,minsize=kwargs.pop('height',None))
        self.columnconfigure(0,minsize=kwargs.pop('width',None))
        self.list = tk.Listbox(self,**kwargs)
        self.list.grid(row=0,sticky='nsew')
        self.config = self.list.config
        side_bar_list_global = self.list
    def change(self,height,width):
        self.rowconfigure(0,minsize=height)
        self.columnconfigure(0,minsize=width)
    def configure(self,**kwargs):
        self.list.configure(**kwargs)
    def insert(self,pos,text):
        self.list.insert(pos,text)
    def delete(self,start,finish):
        self.list.delete(start,finish)
    def bind(self,event,command):
        self.list.bind(event,command)
    def selection_clear(self,start,finish):
        self.list.selection_clear(start,finish)
    def yview(self):
        return self.list.yview

# System Variables
logo_path = unipath.joinpath(data_dir,'logo.png')
logo_image = ImageTk.PhotoImage((Image.open(logo_path)).resize((64,64)))
study_logo_path = unipath.joinpath(data_dir,'study_logo.png')
study_logo_image = ImageTk.PhotoImage((Image.open(study_logo_path)).resize((64,64)))

# Create top menu
if os.name == 'nt':
    top_menu_canvas = tk.Canvas(root,bg=top_menu_bg,highlightthickness=0,height=30,width=700)
    top_menu_canvas_close = static_button(top_menu_canvas,bg=top_menu_bg,activebackground=top_menu_bg,width=36,height=24,borderwidth=0,image=exit_button_image,command = lambda: [cancel_threads(),close_windows()])
    top_menu_canvas_max = static_button(top_menu_canvas,bg=top_menu_bg,activebackground=top_menu_bg,width=36,height=24,borderwidth=0,image=max_button_image,command = lambda: toggle_max())
    top_menu_canvas_mini = static_button(top_menu_canvas,bg=top_menu_bg,activebackground=top_menu_bg,width=36,height=24,borderwidth=0,image=mini_button_image,command = lambda: minimize())
    top_menu_canvas_title = static_label(top_menu_canvas,bg=top_menu_bg,fg=text_fg,font=('Quattrocento Sans',10),text='Pitchi - '+random.choice(header_list),anchor='c')

    top_menu_canvas_close.bind('<Enter>',lambda event:highlight_button(event,top_menu_bg))
    top_menu_canvas_max.bind('<Enter>',lambda event:highlight_button(event,top_menu_bg))
    top_menu_canvas_mini.bind('<Enter>',lambda event:highlight_button(event,top_menu_bg))
    top_menu_canvas_close.bind('<Leave>',return_normal_button)
    top_menu_canvas_max.bind('<Leave>',return_normal_button)
    top_menu_canvas_mini.bind('<Leave>',return_normal_button)

    top_menu_canvas_close.pack(side='right')
    top_menu_canvas_max.pack(side='right')
    top_menu_canvas_mini.pack(side='right')
    top_menu_canvas_title.pack(side='left',padx=10)

    top_menu_canvas.bind('<ButtonPress-1>',lambda event:start_move(event,root))
    top_menu_canvas.bind('<ButtonRelease-1>',lambda event:stop_move(event,root))
    top_menu_canvas.bind('<B1-Motion>',lambda event:move_window(event,root))
    top_menu_canvas_title.bind(event='<ButtonPress-1>',command=lambda event:start_move(event,root))
    top_menu_canvas_title.bind(event='<ButtonRelease-1>',command=lambda event:stop_move(event,root))
    top_menu_canvas_title.bind(event='<B1-Motion>',command=lambda event:move_window(event,root))


# Create pitchi title
pitchi_title_canvas = tk.Canvas(root,bg=title_bg,width=330,highlightthickness=0,height=80)
pitchi_title_frame = tk.Frame(pitchi_title_canvas,bg=title_bg,width=330,height=80)
pitchi_title_frame.bind('<1>',lambda event: pitchi_title_frame.focus_set())
pitchi_title_logo = tk.Label(pitchi_title_canvas,image=logo_image,bg=title_bg)
pitchi_title_label = tk.Label(pitchi_title_canvas,text='a',textvariable=title_label_var,font=('UD Digi Kyokasho NK-R',42),bg=title_bg,fg=title_fg)
settings_button = static_button(pitchi_title_canvas,bg=title_bg,activebackground=title_bg,borderwidth=0,image=settings_button_image,command=lambda:settings_page())

#pitchi_title_logo.bind('<Button-1>',switch_mode)

pitchi_title_canvas.create_window(190,40,window=pitchi_title_frame)
pitchi_title_canvas.create_window(50,40,window=pitchi_title_logo)
pitchi_title_canvas.create_window(100,42,window=pitchi_title_label,anchor='w')
pitchi_title_canvas.create_window(316,66,window=settings_button)
# Create top header
top_header_canvas = tk.Canvas(root,bg=header_bg,highlightthickness=0,height=25,width=700)
top_header_active_list_label = static_label(top_header_canvas,bg=header_bg,fg=text_fg,font=('Quattrocento Sans',10),textvariable=active_list_label_var)
top_header_word_count_label = static_label(top_header_canvas,bg=header_bg,fg=text_fg,font=('Quattrocento Sans',10),textvariable=word_count_label_var)

recount_words()

top_header_active_list_label.pack(side='left',padx=5)
top_header_word_count_label.pack(side='left',padx=5)

add_word_button = static_button(top_header_canvas,text='Add Word',font=('Quattrocento Sans',10),bg=header_bg,fg=text_fg,activebackground=header_bg,activeforeground=highlight_bg,borderwidth=0)
add_word_button.pack(side='right',padx=5)


# Create side bar
side_bar_canvas = tk.Canvas(root,bg=side_bar_bg,width=330,highlightthickness=0,height=55,borderwidth=0)
side_bar_canvas.bind('<1>',lambda event: side_bar_canvas.focus_set())

side_bar_search_bar = tk.Label(side_bar_canvas,image=search_bar_image,bg=side_bar_bg)
side_bar_search_box = static_entry(side_bar_canvas,bg=side_bar_bg,fg=text_fg,width=250,height=22,borderwidth=0,font=('Quattrocento Sans',12),highlightthickness=0,textvariable=search_var)
side_bar_search_box.bind_enter()
side_bar_search_button = static_button(side_bar_canvas,bg=side_bar_bg,activebackground=side_bar_bg,width=22,height=22,image=search_button_image,borderwidth=0)
side_bar_search_button.bind_search()
side_bar_canvas.create_line(0,50,380,50,width=2,fill=top_menu_bg,tags='lines')

side_bar_canvas.create_window(150,25,window=side_bar_search_bar)
side_bar_canvas.create_window(150,25,window=side_bar_search_box)
side_bar_canvas.create_window(310,25,window=side_bar_search_button)

side_bar_search_box.bind('<Up>',listbox_arrow_select)
side_bar_search_box.bind('<Down>',listbox_arrow_select)

# Create side bar list
side_bar_list_canvas = tk.Canvas(root,bg=side_bar_bg,highlightthickness=0,borderwidth=0)

side_bar_list_scrollbar = tk.Scrollbar(side_bar_list_canvas,orient='vertical',highlightthickness=0,relief='flat')

side_bar_list = tk.Listbox(side_bar_list_canvas,bg=side_bar_bg,fg=text_fg,font=('Quattrocento Sans',18),yscrollcommand=side_bar_list_scrollbar.set,relief='flat',borderwidth=0,highlightthickness=0,name='words',selectmode='single',selectbackground=highlight_bg,activestyle='none')
side_bar_list_scrollbar.configure(command=side_bar_list.yview)
side_bar_list.bind('<Shift-Button-1>',side_bar_list_select)
side_bar_list.bind('<Double-Button-1>',side_list_double_click)
side_bar_list.bind('<Return>',lambda e: search_cmd(newtab=False,target=side_bar_list.selection_get()))
side_bar_list.bind('<Shift-Return>',lambda e: search_cmd(newtab=True,target=side_bar_list.selection_get()))
side_bar_list.bind('<FocusOut>',deselect_side_list)
side_bar_list.bind('<Up>',listbox_arrow_select)
side_bar_list.bind('<Down>',listbox_arrow_select)

side_bar_list_canvas.rowconfigure(0,weight=1)
side_bar_list_canvas.columnconfigure(0,weight=1)
side_bar_list_scrollbar.grid(row=0,column=1,sticky='ns')
side_bar_list.grid(row=0,column=0,sticky='nsew')

# Create result area
result_canvas = tk.Canvas(root,bg=background,width=700,highlightthickness=0,borderwidth=0)
result_canvas.bind('<1>',lambda event: side_bar_canvas.focus_set())
result_canvas.bind('<Enter>',allow_result_scroll)
result_canvas.bind('<Leave>',deny_result_scroll)
result_canvas.bind_all('<MouseWheel>',scroll_result_page)

result_notebook = ttk.Notebook(result_canvas)
result_notebook.grid(row=0,column=0,sticky='nsew')
result_notebook.bind('<Button-3>',right_click_tab)

# Add word pane
add_word_canvas = tk.Canvas(root,bg=side_bar_bg,width=0,highlightthickness=0)
def add_word_canvas_animation( *event,dir):
    if dir == 'in':
        add_word_canvas.configure(width=280)
    if dir == 'out':
        add_word_canvas.configure(width=0)
    else:
        cancel_threads()
def toggle_add_word_canvas(*event,dir):
    width = add_word_canvas.winfo_width()
    if width == 280:
        add_word_canvas_animation(dir='out')
        thread1 = threading.Timer(0.02,adjust_page_canvas)
        thread1.start()
    else:
        add_word_canvas_animation(dir='in')
        thread1 = threading.Timer(0.02,adjust_page_canvas)
        thread1.start()
add_word_button.bind(event='<Button-1>',command=(lambda e: toggle_add_word_canvas(dir='in')))
add_word_button.bind('<Enter>',lambda event:highlight_button(event,header_bg))
add_word_button.bind('<Leave>',return_normal_button)

add_word_header = static_label(add_word_canvas,bg=title_bg,fg=text_fg,text='Add word',anchor='c',font=('Quattrocento Sans',16),width=280)

add_word_word_label = static_label(add_word_canvas,bg=side_bar_bg,fg=text_fg,text='Word',anchor='e',font=('Quattrocento Sans',14),width=11)
add_word_word_entry = static_entry(add_word_canvas,bg=text_bg,fg=text_fg,font=('Quattrocento Sans',14),width=120,height=25,relief='flat')
add_word_hiragana_label = static_label(add_word_canvas,bg=side_bar_bg,fg=text_fg,text='Hiragana',anchor='e',font=('Quattrocento Sans',14),width=11)
add_word_hiragana_entry = static_entry(add_word_canvas,bg=text_bg,fg=text_fg,font=('Quattrocento Sans',14),width=120,height=25,relief='flat')
add_word_romaji_label = static_label(add_word_canvas,bg=side_bar_bg,fg=text_fg,text='Romaji',anchor='e',font=('Quattrocento Sans',14),width=11)
add_word_romaji_entry = static_entry(add_word_canvas,bg=text_bg,fg=text_fg,font=('Quattrocento Sans',14),width=120,height=25,relief='flat')
add_word_trans_label = static_label(add_word_canvas,bg=side_bar_bg,fg=text_fg,text='Translation',anchor='e',font=('Quattrocento Sans',14),width=11)
add_word_trans_entry = static_entry(add_word_canvas,bg=text_bg,fg=text_fg,font=('Quattrocento Sans',12),width=120,height=25,relief='flat')
add_word_mora_label = static_label(add_word_canvas,bg=side_bar_bg,fg=text_fg,text='Mora count',anchor='e',font=('Quattrocento Sans',14),width=20)
add_word_mora_entry = static_entry(add_word_canvas,bg=text_bg,fg=text_fg,width=30,height=25,borderwidth=0,font=('Quattrocento Sans',12),highlightthickness=0)
add_word_pap_label = static_label(add_word_canvas,bg=side_bar_bg,fg=text_fg,text='Pitch Accent Pattern',anchor='e',font=('Quattrocento Sans',14),width=20)

add_word_pap_var = tk.StringVar(add_word_canvas)
add_word_pap_var.set('0')
add_word_pap_entry = tk.OptionMenu(add_word_canvas,add_word_pap_var,'0','1','2','3','4','5','6','7','8')
add_word_pap_entry.configure(relief='flat',fg=text_fg,bg=text_bg,highlightthickness=0,activebackground=text_bg,activeforeground=text_fg)
add_word_pap_entry['menu'].configure(bg=text_bg,fg=text_fg,activebackground=highlight_bg)

add_word_notes_label = static_label(add_word_canvas,bg=side_bar_bg,fg=text_fg,text='Usage notes',anchor='e',font=('Quattrocento Sans',12),width=20)
add_word_notes_textbox = static_textbox(add_word_canvas,bg=text_bg,fg=text_fg,font=('Quattrocento Sans',11),width=240,wrap='word',height=300)

add_word_add_button = static_button(add_word_canvas,bg=button_bg,fg=text_fg,command=add_word_cmd,text='Add word',font=('Quattrocento Sans',11),width=100,relief='flat',activebackground=button_bg,activeforeground=highlight_bg,borderwidth=0)
add_word_add_button.bind('<Enter>',lambda event:highlight_button(event,button_bg))
add_word_add_button.bind('<Leave>',return_normal_button)

add_word_canvas.create_window(140,15,window=add_word_header,anchor='c')
add_word_canvas.create_window(65,50,window=add_word_word_label)
add_word_canvas.create_window(130,50,window=add_word_word_entry,anchor='w')
add_word_canvas.create_window(65,95,window=add_word_hiragana_label)
add_word_canvas.create_window(130,95,window=add_word_hiragana_entry,anchor='w')
add_word_canvas.create_window(65,135,window=add_word_romaji_label)
add_word_canvas.create_window(130,135,window=add_word_romaji_entry,anchor='w')
add_word_canvas.create_window(65,175,window=add_word_trans_label)
add_word_canvas.create_window(130,175,window=add_word_trans_entry,anchor='w')
add_word_canvas.create_window(105,210,window=add_word_mora_label)
add_word_canvas.create_window(220,210,window=add_word_mora_entry,anchor='w')
add_word_canvas.create_window(85,250,window=add_word_pap_label)
add_word_canvas.create_window(200,250,window=add_word_pap_entry,anchor='w')
add_word_canvas.create_window(20,310,window=add_word_notes_label)
add_word_notes_textbox_window = add_word_canvas.create_window(20,450,window=add_word_notes_textbox,anchor='w')
add_word_add_button_window = add_word_canvas.create_window(0,0,window=add_word_add_button)

# Welcome page
welcomeContainer = tk.Frame(result_notebook,bg=background)
welcomeContainer.grid(row=0,column=0,sticky='nsew')
welcomeContainer.columnconfigure(1,weight=1)
welcomeContainer.rowconfigure(0,weight=1)


welcomeFrame = tk.Canvas(welcomeContainer,bg=background,highlightthickness=0,borderwidth=0)
welcomeScrollbar = tk.Scrollbar(welcomeContainer,command=welcomeFrame.yview,width=15)
welcomeFrame.configure(yscrollcommand=welcomeScrollbar.set,scrollregion=(0,0,100,1500))

welcomeScrollbar.grid(row=0,column=0,sticky='nsew')
welcomeFrame.columnconfigure(0,weight=1)
welcomeFrame.rowconfigure(0,weight=1)

welcomeSubframe = tk.Frame(welcomeFrame,bg=background,width=0)
welcomeSubframe.columnconfigure(0,weight=1)

welcome_title = tk.Label(welcomeSubframe,bg=background,fg=text_fg,text='Welcome to Pitchi!',font=('Quattrocento Sans',82),anchor='c',justify='left')
welcome_subtitle = tk.Label(welcomeSubframe,bg=background,fg=text_fg,text='A Japanese learning tool that visualizes pitch accents for you.',font=('Quattrocento Sans',12),anchor='c',justify='left')
welcome_heading1 = tk.Label(welcomeSubframe,bg=background,fg=text_fg,text='What is Pitchi?',font=('Quattrocento Sans',22,'bold'),anchor='w',justify='left')
welcome_paragraph1 = tk.Message(welcomeSubframe,bg=background,fg=text_fg,text='Pitchi aids in learning the pitch accent patterns in Japanese. It functions much like a dictionary, letting you search through a list of words using the kanji/hiragana/katana, romaji, or translation. The word is then shown in its written form, with the romaji beneath it. Below that, the words pitch accent pattern is drawn with each of the words mora beneath their corresponding pitch accent pattern point. At the bottom, any notes added in for the word are displayed.',font=('Quattrocento Sans',14),justify='left',anchor='w')
welcome_heading2 = tk.Label(welcomeSubframe,bg=background,fg=text_fg,text='How Do You Make a List For Pitchi?',font=('Quattrocento Sans',22,'bold'),anchor='w',justify='left')
welcome_paragraph2 = tk.Message(welcomeSubframe,bg=background,fg=text_fg,text='There are two ways of creating list files for Pitchi. The most straight forward way is to use the built in interface to add words into the currently active list. This menu can be brought up by click the "Add Word" button up at the top right. The only fields that are required are the word itself and its hiragana/katakana. All other fields are optional for adding the forward. However, with no further information, the words romaji, translation, pitch accent patterns, and usage notes will not be displayed. It is heavily reccommended that all fields be filled out when adding new words. It is also important to note that when adding words through this method, the word will be added into whatever list you currently have open (the master list is opened by default).\n\nThe other method of creating list files is through INI file creation. Pitchi stopped using the INI file format for lists starting at version 0.4. Since then, the HDF5 format is being used. These files are a little less comfortable to create, so you are also able to convert list files from the INI format to HDF5 through the settings menu. Our GitHub page has a breakdown on how to create these lists in the INI format and a brief introduction into what INI files are for those are inexperienced with them. Converting lists with INI formatting typicaally offers zero issues, providing an easy and accessible means of creating lists manually rather than through the built in interface. However, larger lists can cause issues on certain systems, specifically those with low amounts of memory. It is reccommended to break up larger list files into chunks and convert them individually rather if there are issues when converting.',font=('Quattrocento Sans',14),justify='left',anchor='w')

welcomeDeadzone = tk.Canvas(welcomeSubframe,bg=background,highlightthickness=0,borderwidth=0,height=100)

welcome_title.grid(row=0,column=0,sticky='ew')
welcome_subtitle.grid(row=1,column=0,sticky='ew')
welcome_heading1.grid(row=2,column=0,sticky='ew',padx=15)
welcome_paragraph1.grid(row=3,column=0,sticky='ew',padx=30)
welcome_heading2.grid(row=4,column=0,sticky='ew',padx=15)
welcome_paragraph2.grid(row=5,column=0,sticky='ew',padx=30)

welcomeDeadzone.grid(row=6,column=0,sticky='ew')

welcomeFrame.grid(row=0,column=1,sticky='nsew')

welcomeWindow = welcomeFrame.create_window(0,0,anchor='nw',window=welcomeSubframe)

result_notebook.add(welcomeContainer,text='Welcome')
result_notebook.bind('<<NotebookTabChanged>>',adjust_page_canvas)

result_notebook.enable_traversal()

result_canvas.bind('<Configure>',resize_results_canvas)

# Configure Grid
grid_pitchi()

# Adjust Grid
draw_header_lines()

# Create resize corners
root_bot_right_corner = ttk.Sizegrip(root)
root_bot_right_corner.bind('<B1-Motion>',grab_resize)
root_bot_right_corner.lift()
root_bot_right_corner.place(relx=1.0,rely=1.0,anchor='se')

populate_side_bar_list()

root.mainloop()
